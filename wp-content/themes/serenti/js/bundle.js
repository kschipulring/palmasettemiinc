/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(1);

__webpack_require__(2);

__webpack_require__(3);

jQuery(function ($) {
	"use strict";

	// hide #back-top first

	$("#back-top").hide();

	// fade in #back-top

	$(window).scroll(function () {
		if ($(this).scrollTop() > 100) {
			$('#back-top').fadeIn();
		} else {
			$('#back-top').fadeOut();
		}
	});

	// scroll body to 0px on click
	$('#back-top a').on("click", function () {
		$('body,html').animate({
			scrollTop: 0
		}, 800);
		return false;
	});

	$('img[usemap]').rwdImageMaps();

	/*$('area').on('click', function() {
 	alert($(this).attr('alt') + ' clicked');
 });*/
});
//import './dev/bootstrap.js';

//master scss file

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
* rwdImageMaps jQuery plugin v1.5
*
* Allows image maps to be used in a responsive design by recalculating the area coordinates to match the actual image size on load and window.resize
*
* Copyright (c) 2013 Matt Stow
* https://github.com/stowball/jQuery-rwdImageMaps
* http://mattstow.com
* Licensed under the MIT license
*/
;(function (a) {
  a.fn.rwdImageMaps = function () {
    var c = this;var b = function b() {
      c.each(function () {
        if (typeof a(this).attr("usemap") == "undefined") {
          return;
        }var e = this,
            d = a(e);a("<img />").load(function () {
          var g = "width",
              m = "height",
              n = d.attr(g),
              j = d.attr(m);if (!n || !j) {
            var o = new Image();o.src = d.attr("src");if (!n) {
              n = o.width;
            }if (!j) {
              j = o.height;
            }
          }var f = d.width() / 100,
              k = d.height() / 100,
              i = d.attr("usemap").replace("#", ""),
              l = "coords";a('map[name="' + i + '"]').find("area").each(function () {
            var r = a(this);if (!r.data(l)) {
              r.data(l, r.attr(l));
            }var q = r.data(l).split(","),
                p = new Array(q.length);for (var h = 0; h < p.length; ++h) {
              if (h % 2 === 0) {
                p[h] = parseInt(q[h] / n * 100 * f);
              } else {
                p[h] = parseInt(q[h] / j * 100 * k);
              }
            }r.attr(l, p.toString());
          });
        }).attr("src", d.attr("src"));
      });
    };a(window).resize(b).trigger("resize");return this;
  };
})(jQuery);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Bootstrap v3.3.5 (http://getbootstrap.com)
 * Copyright 2011-2015 Twitter, Inc.
 * Licensed under the MIT license
 */
if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery");+function (a) {
  "use strict";
  var b = a.fn.jquery.split(" ")[0].split(".");if (b[0] < 2 && b[1] < 9 || 1 == b[0] && 9 == b[1] && b[2] < 1) throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher");
}(jQuery), +function (a) {
  "use strict";
  function b() {
    var a = document.createElement("bootstrap"),
        b = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" };for (var c in b) {
      if (void 0 !== a.style[c]) return { end: b[c] };
    }return !1;
  }a.fn.emulateTransitionEnd = function (b) {
    var c = !1,
        d = this;a(this).one("bsTransitionEnd", function () {
      c = !0;
    });var e = function e() {
      c || a(d).trigger(a.support.transition.end);
    };return setTimeout(e, b), this;
  }, a(function () {
    a.support.transition = b(), a.support.transition && (a.event.special.bsTransitionEnd = { bindType: a.support.transition.end, delegateType: a.support.transition.end, handle: function handle(b) {
        return a(b.target).is(this) ? b.handleObj.handler.apply(this, arguments) : void 0;
      } });
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var c = a(this),
          e = c.data("bs.alert");e || c.data("bs.alert", e = new d(this)), "string" == typeof b && e[b].call(c);
    });
  }var c = '[data-dismiss="alert"]',
      d = function d(b) {
    a(b).on("click", c, this.close);
  };d.VERSION = "3.3.5", d.TRANSITION_DURATION = 150, d.prototype.close = function (b) {
    function c() {
      g.detach().trigger("closed.bs.alert").remove();
    }var e = a(this),
        f = e.attr("data-target");f || (f = e.attr("href"), f = f && f.replace(/.*(?=#[^\s]*$)/, ""));var g = a(f);b && b.preventDefault(), g.length || (g = e.closest(".alert")), g.trigger(b = a.Event("close.bs.alert")), b.isDefaultPrevented() || (g.removeClass("in"), a.support.transition && g.hasClass("fade") ? g.one("bsTransitionEnd", c).emulateTransitionEnd(d.TRANSITION_DURATION) : c());
  };var e = a.fn.alert;a.fn.alert = b, a.fn.alert.Constructor = d, a.fn.alert.noConflict = function () {
    return a.fn.alert = e, this;
  }, a(document).on("click.bs.alert.data-api", c, d.prototype.close);
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.button"),
          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;e || d.data("bs.button", e = new c(this, f)), "toggle" == b ? e.toggle() : b && e.setState(b);
    });
  }var c = function c(b, d) {
    this.$element = a(b), this.options = a.extend({}, c.DEFAULTS, d), this.isLoading = !1;
  };c.VERSION = "3.3.5", c.DEFAULTS = { loadingText: "loading..." }, c.prototype.setState = function (b) {
    var c = "disabled",
        d = this.$element,
        e = d.is("input") ? "val" : "html",
        f = d.data();b += "Text", null == f.resetText && d.data("resetText", d[e]()), setTimeout(a.proxy(function () {
      d[e](null == f[b] ? this.options[b] : f[b]), "loadingText" == b ? (this.isLoading = !0, d.addClass(c).attr(c, c)) : this.isLoading && (this.isLoading = !1, d.removeClass(c).removeAttr(c));
    }, this), 0);
  }, c.prototype.toggle = function () {
    var a = !0,
        b = this.$element.closest('[data-toggle="buttons"]');if (b.length) {
      var c = this.$element.find("input");"radio" == c.prop("type") ? (c.prop("checked") && (a = !1), b.find(".active").removeClass("active"), this.$element.addClass("active")) : "checkbox" == c.prop("type") && (c.prop("checked") !== this.$element.hasClass("active") && (a = !1), this.$element.toggleClass("active")), c.prop("checked", this.$element.hasClass("active")), a && c.trigger("change");
    } else this.$element.attr("aria-pressed", !this.$element.hasClass("active")), this.$element.toggleClass("active");
  };var d = a.fn.button;a.fn.button = b, a.fn.button.Constructor = c, a.fn.button.noConflict = function () {
    return a.fn.button = d, this;
  }, a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function (c) {
    var d = a(c.target);d.hasClass("btn") || (d = d.closest(".btn")), b.call(d, "toggle"), a(c.target).is('input[type="radio"]') || a(c.target).is('input[type="checkbox"]') || c.preventDefault();
  }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function (b) {
    a(b.target).closest(".btn").toggleClass("focus", /^focus(in)?$/.test(b.type));
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.carousel"),
          f = a.extend({}, c.DEFAULTS, d.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b),
          g = "string" == typeof b ? b : f.slide;e || d.data("bs.carousel", e = new c(this, f)), "number" == typeof b ? e.to(b) : g ? e[g]() : f.interval && e.pause().cycle();
    });
  }var c = function c(b, _c) {
    this.$element = a(b), this.$indicators = this.$element.find(".carousel-indicators"), this.options = _c, this.paused = null, this.sliding = null, this.interval = null, this.$active = null, this.$items = null, this.options.keyboard && this.$element.on("keydown.bs.carousel", a.proxy(this.keydown, this)), "hover" == this.options.pause && !("ontouchstart" in document.documentElement) && this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this));
  };c.VERSION = "3.3.5", c.TRANSITION_DURATION = 600, c.DEFAULTS = { interval: 5e3, pause: "hover", wrap: !0, keyboard: !0 }, c.prototype.keydown = function (a) {
    if (!/input|textarea/i.test(a.target.tagName)) {
      switch (a.which) {case 37:
          this.prev();break;case 39:
          this.next();break;default:
          return;}a.preventDefault();
    }
  }, c.prototype.cycle = function (b) {
    return b || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this;
  }, c.prototype.getItemIndex = function (a) {
    return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active);
  }, c.prototype.getItemForDirection = function (a, b) {
    var c = this.getItemIndex(b),
        d = "prev" == a && 0 === c || "next" == a && c == this.$items.length - 1;if (d && !this.options.wrap) return b;var e = "prev" == a ? -1 : 1,
        f = (c + e) % this.$items.length;return this.$items.eq(f);
  }, c.prototype.to = function (a) {
    var b = this,
        c = this.getItemIndex(this.$active = this.$element.find(".item.active"));return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function () {
      b.to(a);
    }) : c == a ? this.pause().cycle() : this.slide(a > c ? "next" : "prev", this.$items.eq(a));
  }, c.prototype.pause = function (b) {
    return b || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end), this.cycle(!0)), this.interval = clearInterval(this.interval), this;
  }, c.prototype.next = function () {
    return this.sliding ? void 0 : this.slide("next");
  }, c.prototype.prev = function () {
    return this.sliding ? void 0 : this.slide("prev");
  }, c.prototype.slide = function (b, d) {
    var e = this.$element.find(".item.active"),
        f = d || this.getItemForDirection(b, e),
        g = this.interval,
        h = "next" == b ? "left" : "right",
        i = this;if (f.hasClass("active")) return this.sliding = !1;var j = f[0],
        k = a.Event("slide.bs.carousel", { relatedTarget: j, direction: h });if (this.$element.trigger(k), !k.isDefaultPrevented()) {
      if (this.sliding = !0, g && this.pause(), this.$indicators.length) {
        this.$indicators.find(".active").removeClass("active");var l = a(this.$indicators.children()[this.getItemIndex(f)]);l && l.addClass("active");
      }var m = a.Event("slid.bs.carousel", { relatedTarget: j, direction: h });return a.support.transition && this.$element.hasClass("slide") ? (f.addClass(b), f[0].offsetWidth, e.addClass(h), f.addClass(h), e.one("bsTransitionEnd", function () {
        f.removeClass([b, h].join(" ")).addClass("active"), e.removeClass(["active", h].join(" ")), i.sliding = !1, setTimeout(function () {
          i.$element.trigger(m);
        }, 0);
      }).emulateTransitionEnd(c.TRANSITION_DURATION)) : (e.removeClass("active"), f.addClass("active"), this.sliding = !1, this.$element.trigger(m)), g && this.cycle(), this;
    }
  };var d = a.fn.carousel;a.fn.carousel = b, a.fn.carousel.Constructor = c, a.fn.carousel.noConflict = function () {
    return a.fn.carousel = d, this;
  };var e = function e(c) {
    var d,
        e = a(this),
        f = a(e.attr("data-target") || (d = e.attr("href")) && d.replace(/.*(?=#[^\s]+$)/, ""));if (f.hasClass("carousel")) {
      var g = a.extend({}, f.data(), e.data()),
          h = e.attr("data-slide-to");h && (g.interval = !1), b.call(f, g), h && f.data("bs.carousel").to(h), c.preventDefault();
    }
  };a(document).on("click.bs.carousel.data-api", "[data-slide]", e).on("click.bs.carousel.data-api", "[data-slide-to]", e), a(window).on("load", function () {
    a('[data-ride="carousel"]').each(function () {
      var c = a(this);b.call(c, c.data());
    });
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    var c,
        d = b.attr("data-target") || (c = b.attr("href")) && c.replace(/.*(?=#[^\s]+$)/, "");return a(d);
  }function c(b) {
    return this.each(function () {
      var c = a(this),
          e = c.data("bs.collapse"),
          f = a.extend({}, d.DEFAULTS, c.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b);!e && f.toggle && /show|hide/.test(b) && (f.toggle = !1), e || c.data("bs.collapse", e = new d(this, f)), "string" == typeof b && e[b]();
    });
  }var d = function d(b, c) {
    this.$element = a(b), this.options = a.extend({}, d.DEFAULTS, c), this.$trigger = a('[data-toggle="collapse"][href="#' + b.id + '"],[data-toggle="collapse"][data-target="#' + b.id + '"]'), this.transitioning = null, this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger), this.options.toggle && this.toggle();
  };d.VERSION = "3.3.5", d.TRANSITION_DURATION = 350, d.DEFAULTS = { toggle: !0 }, d.prototype.dimension = function () {
    var a = this.$element.hasClass("width");return a ? "width" : "height";
  }, d.prototype.show = function () {
    if (!this.transitioning && !this.$element.hasClass("in")) {
      var b,
          e = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");if (!(e && e.length && (b = e.data("bs.collapse"), b && b.transitioning))) {
        var f = a.Event("show.bs.collapse");if (this.$element.trigger(f), !f.isDefaultPrevented()) {
          e && e.length && (c.call(e, "hide"), b || e.data("bs.collapse", null));var g = this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[g](0).attr("aria-expanded", !0), this.$trigger.removeClass("collapsed").attr("aria-expanded", !0), this.transitioning = 1;var h = function h() {
            this.$element.removeClass("collapsing").addClass("collapse in")[g](""), this.transitioning = 0, this.$element.trigger("shown.bs.collapse");
          };if (!a.support.transition) return h.call(this);var i = a.camelCase(["scroll", g].join("-"));this.$element.one("bsTransitionEnd", a.proxy(h, this)).emulateTransitionEnd(d.TRANSITION_DURATION)[g](this.$element[0][i]);
        }
      }
    }
  }, d.prototype.hide = function () {
    if (!this.transitioning && this.$element.hasClass("in")) {
      var b = a.Event("hide.bs.collapse");if (this.$element.trigger(b), !b.isDefaultPrevented()) {
        var c = this.dimension();this.$element[c](this.$element[c]())[0].offsetHeight, this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1), this.$trigger.addClass("collapsed").attr("aria-expanded", !1), this.transitioning = 1;var e = function e() {
          this.transitioning = 0, this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse");
        };return a.support.transition ? void this.$element[c](0).one("bsTransitionEnd", a.proxy(e, this)).emulateTransitionEnd(d.TRANSITION_DURATION) : e.call(this);
      }
    }
  }, d.prototype.toggle = function () {
    this[this.$element.hasClass("in") ? "hide" : "show"]();
  }, d.prototype.getParent = function () {
    return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]').each(a.proxy(function (c, d) {
      var e = a(d);this.addAriaAndCollapsedClass(b(e), e);
    }, this)).end();
  }, d.prototype.addAriaAndCollapsedClass = function (a, b) {
    var c = a.hasClass("in");a.attr("aria-expanded", c), b.toggleClass("collapsed", !c).attr("aria-expanded", c);
  };var e = a.fn.collapse;a.fn.collapse = c, a.fn.collapse.Constructor = d, a.fn.collapse.noConflict = function () {
    return a.fn.collapse = e, this;
  }, a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function (d) {
    var e = a(this);e.attr("data-target") || d.preventDefault();var f = b(e),
        g = f.data("bs.collapse"),
        h = g ? "toggle" : e.data();c.call(f, h);
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    var c = b.attr("data-target");c || (c = b.attr("href"), c = c && /#[A-Za-z]/.test(c) && c.replace(/.*(?=#[^\s]*$)/, ""));var d = c && a(c);return d && d.length ? d : b.parent();
  }function c(c) {
    c && 3 === c.which || (a(e).remove(), a(f).each(function () {
      var d = a(this),
          e = b(d),
          f = { relatedTarget: this };e.hasClass("open") && (c && "click" == c.type && /input|textarea/i.test(c.target.tagName) && a.contains(e[0], c.target) || (e.trigger(c = a.Event("hide.bs.dropdown", f)), c.isDefaultPrevented() || (d.attr("aria-expanded", "false"), e.removeClass("open").trigger("hidden.bs.dropdown", f))));
    }));
  }function d(b) {
    return this.each(function () {
      var c = a(this),
          d = c.data("bs.dropdown");d || c.data("bs.dropdown", d = new g(this)), "string" == typeof b && d[b].call(c);
    });
  }var e = ".dropdown-backdrop",
      f = '[data-toggle="dropdown"]',
      g = function g(b) {
    a(b).on("click.bs.dropdown", this.toggle);
  };g.VERSION = "3.3.5", g.prototype.toggle = function (d) {
    var e = a(this);if (!e.is(".disabled, :disabled")) {
      var f = b(e),
          g = f.hasClass("open");if (c(), !g) {
        "ontouchstart" in document.documentElement && !f.closest(".navbar-nav").length && a(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(a(this)).on("click", c);var h = { relatedTarget: this };if (f.trigger(d = a.Event("show.bs.dropdown", h)), d.isDefaultPrevented()) return;e.trigger("focus").attr("aria-expanded", "true"), f.toggleClass("open").trigger("shown.bs.dropdown", h);
      }return !1;
    }
  }, g.prototype.keydown = function (c) {
    if (/(38|40|27|32)/.test(c.which) && !/input|textarea/i.test(c.target.tagName)) {
      var d = a(this);if (c.preventDefault(), c.stopPropagation(), !d.is(".disabled, :disabled")) {
        var e = b(d),
            g = e.hasClass("open");if (!g && 27 != c.which || g && 27 == c.which) return 27 == c.which && e.find(f).trigger("focus"), d.trigger("click");var h = " li:not(.disabled):visible a",
            i = e.find(".dropdown-menu" + h);if (i.length) {
          var j = i.index(c.target);38 == c.which && j > 0 && j--, 40 == c.which && j < i.length - 1 && j++, ~j || (j = 0), i.eq(j).trigger("focus");
        }
      }
    }
  };var h = a.fn.dropdown;a.fn.dropdown = d, a.fn.dropdown.Constructor = g, a.fn.dropdown.noConflict = function () {
    return a.fn.dropdown = h, this;
  }, a(document).on("click.bs.dropdown.data-api", c).on("click.bs.dropdown.data-api", ".dropdown form", function (a) {
    a.stopPropagation();
  }).on("click.bs.dropdown.data-api", f, g.prototype.toggle).on("keydown.bs.dropdown.data-api", f, g.prototype.keydown).on("keydown.bs.dropdown.data-api", ".dropdown-menu", g.prototype.keydown);
}(jQuery), +function (a) {
  "use strict";
  function b(b, d) {
    return this.each(function () {
      var e = a(this),
          f = e.data("bs.modal"),
          g = a.extend({}, c.DEFAULTS, e.data(), "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b);f || e.data("bs.modal", f = new c(this, g)), "string" == typeof b ? f[b](d) : g.show && f.show(d);
    });
  }var c = function c(b, _c2) {
    this.options = _c2, this.$body = a(document.body), this.$element = a(b), this.$dialog = this.$element.find(".modal-dialog"), this.$backdrop = null, this.isShown = null, this.originalBodyPad = null, this.scrollbarWidth = 0, this.ignoreBackdropClick = !1, this.options.remote && this.$element.find(".modal-content").load(this.options.remote, a.proxy(function () {
      this.$element.trigger("loaded.bs.modal");
    }, this));
  };c.VERSION = "3.3.5", c.TRANSITION_DURATION = 300, c.BACKDROP_TRANSITION_DURATION = 150, c.DEFAULTS = { backdrop: !0, keyboard: !0, show: !0 }, c.prototype.toggle = function (a) {
    return this.isShown ? this.hide() : this.show(a);
  }, c.prototype.show = function (b) {
    var d = this,
        e = a.Event("show.bs.modal", { relatedTarget: b });this.$element.trigger(e), this.isShown || e.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"), this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function () {
      d.$element.one("mouseup.dismiss.bs.modal", function (b) {
        a(b.target).is(d.$element) && (d.ignoreBackdropClick = !0);
      });
    }), this.backdrop(function () {
      var e = a.support.transition && d.$element.hasClass("fade");d.$element.parent().length || d.$element.appendTo(d.$body), d.$element.show().scrollTop(0), d.adjustDialog(), e && d.$element[0].offsetWidth, d.$element.addClass("in"), d.enforceFocus();var f = a.Event("shown.bs.modal", { relatedTarget: b });e ? d.$dialog.one("bsTransitionEnd", function () {
        d.$element.trigger("focus").trigger(f);
      }).emulateTransitionEnd(c.TRANSITION_DURATION) : d.$element.trigger("focus").trigger(f);
    }));
  }, c.prototype.hide = function (b) {
    b && b.preventDefault(), b = a.Event("hide.bs.modal"), this.$element.trigger(b), this.isShown && !b.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"), this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(c.TRANSITION_DURATION) : this.hideModal());
  }, c.prototype.enforceFocus = function () {
    a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function (a) {
      this.$element[0] === a.target || this.$element.has(a.target).length || this.$element.trigger("focus");
    }, this));
  }, c.prototype.escape = function () {
    this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function (a) {
      27 == a.which && this.hide();
    }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal");
  }, c.prototype.resize = function () {
    this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal");
  }, c.prototype.hideModal = function () {
    var a = this;this.$element.hide(), this.backdrop(function () {
      a.$body.removeClass("modal-open"), a.resetAdjustments(), a.resetScrollbar(), a.$element.trigger("hidden.bs.modal");
    });
  }, c.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove(), this.$backdrop = null;
  }, c.prototype.backdrop = function (b) {
    var d = this,
        e = this.$element.hasClass("fade") ? "fade" : "";if (this.isShown && this.options.backdrop) {
      var f = a.support.transition && e;if (this.$backdrop = a(document.createElement("div")).addClass("modal-backdrop " + e).appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function (a) {
        return this.ignoreBackdropClick ? void (this.ignoreBackdropClick = !1) : void (a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide()));
      }, this)), f && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), !b) return;f ? this.$backdrop.one("bsTransitionEnd", b).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : b();
    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass("in");var g = function g() {
        d.removeBackdrop(), b && b();
      };a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd", g).emulateTransitionEnd(c.BACKDROP_TRANSITION_DURATION) : g();
    } else b && b();
  }, c.prototype.handleUpdate = function () {
    this.adjustDialog();
  }, c.prototype.adjustDialog = function () {
    var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;this.$element.css({ paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "", paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : "" });
  }, c.prototype.resetAdjustments = function () {
    this.$element.css({ paddingLeft: "", paddingRight: "" });
  }, c.prototype.checkScrollbar = function () {
    var a = window.innerWidth;if (!a) {
      var b = document.documentElement.getBoundingClientRect();a = b.right - Math.abs(b.left);
    }this.bodyIsOverflowing = document.body.clientWidth < a, this.scrollbarWidth = this.measureScrollbar();
  }, c.prototype.setScrollbar = function () {
    var a = parseInt(this.$body.css("padding-right") || 0, 10);this.originalBodyPad = document.body.style.paddingRight || "", this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth);
  }, c.prototype.resetScrollbar = function () {
    this.$body.css("padding-right", this.originalBodyPad);
  }, c.prototype.measureScrollbar = function () {
    var a = document.createElement("div");a.className = "modal-scrollbar-measure", this.$body.append(a);var b = a.offsetWidth - a.clientWidth;return this.$body[0].removeChild(a), b;
  };var d = a.fn.modal;a.fn.modal = b, a.fn.modal.Constructor = c, a.fn.modal.noConflict = function () {
    return a.fn.modal = d, this;
  }, a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function (c) {
    var d = a(this),
        e = d.attr("href"),
        f = a(d.attr("data-target") || e && e.replace(/.*(?=#[^\s]+$)/, "")),
        g = f.data("bs.modal") ? "toggle" : a.extend({ remote: !/#/.test(e) && e }, f.data(), d.data());d.is("a") && c.preventDefault(), f.one("show.bs.modal", function (a) {
      a.isDefaultPrevented() || f.one("hidden.bs.modal", function () {
        d.is(":visible") && d.trigger("focus");
      });
    }), b.call(f, g, this);
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.tooltip"),
          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data("bs.tooltip", e = new c(this, f)), "string" == typeof b && e[b]());
    });
  }var c = function c(a, b) {
    this.type = null, this.options = null, this.enabled = null, this.timeout = null, this.hoverState = null, this.$element = null, this.inState = null, this.init("tooltip", a, b);
  };c.VERSION = "3.3.5", c.TRANSITION_DURATION = 150, c.DEFAULTS = { animation: !0, placement: "top", selector: !1, template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, container: !1, viewport: { selector: "body", padding: 0 } }, c.prototype.init = function (b, c, d) {
    if (this.enabled = !0, this.type = b, this.$element = a(c), this.options = this.getOptions(d), this.$viewport = this.options.viewport && a(a.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : this.options.viewport.selector || this.options.viewport), this.inState = { click: !1, hover: !1, focus: !1 }, this.$element[0] instanceof document.constructor && !this.options.selector) throw new Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");for (var e = this.options.trigger.split(" "), f = e.length; f--;) {
      var g = e[f];if ("click" == g) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));else if ("manual" != g) {
        var h = "hover" == g ? "mouseenter" : "focusin",
            i = "hover" == g ? "mouseleave" : "focusout";this.$element.on(h + "." + this.type, this.options.selector, a.proxy(this.enter, this)), this.$element.on(i + "." + this.type, this.options.selector, a.proxy(this.leave, this));
      }
    }this.options.selector ? this._options = a.extend({}, this.options, { trigger: "manual", selector: "" }) : this.fixTitle();
  }, c.prototype.getDefaults = function () {
    return c.DEFAULTS;
  }, c.prototype.getOptions = function (b) {
    return b = a.extend({}, this.getDefaults(), this.$element.data(), b), b.delay && "number" == typeof b.delay && (b.delay = { show: b.delay, hide: b.delay }), b;
  }, c.prototype.getDelegateOptions = function () {
    var b = {},
        c = this.getDefaults();return this._options && a.each(this._options, function (a, d) {
      c[a] != d && (b[a] = d);
    }), b;
  }, c.prototype.enter = function (b) {
    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusin" == b.type ? "focus" : "hover"] = !0), c.tip().hasClass("in") || "in" == c.hoverState ? void (c.hoverState = "in") : (clearTimeout(c.timeout), c.hoverState = "in", c.options.delay && c.options.delay.show ? void (c.timeout = setTimeout(function () {
      "in" == c.hoverState && c.show();
    }, c.options.delay.show)) : c.show());
  }, c.prototype.isInStateTrue = function () {
    for (var a in this.inState) {
      if (this.inState[a]) return !0;
    }return !1;
  }, c.prototype.leave = function (b) {
    var c = b instanceof this.constructor ? b : a(b.currentTarget).data("bs." + this.type);return c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c)), b instanceof a.Event && (c.inState["focusout" == b.type ? "focus" : "hover"] = !1), c.isInStateTrue() ? void 0 : (clearTimeout(c.timeout), c.hoverState = "out", c.options.delay && c.options.delay.hide ? void (c.timeout = setTimeout(function () {
      "out" == c.hoverState && c.hide();
    }, c.options.delay.hide)) : c.hide());
  }, c.prototype.show = function () {
    var b = a.Event("show.bs." + this.type);if (this.hasContent() && this.enabled) {
      this.$element.trigger(b);var d = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);if (b.isDefaultPrevented() || !d) return;var e = this,
          f = this.tip(),
          g = this.getUID(this.type);this.setContent(), f.attr("id", g), this.$element.attr("aria-describedby", g), this.options.animation && f.addClass("fade");var h = "function" == typeof this.options.placement ? this.options.placement.call(this, f[0], this.$element[0]) : this.options.placement,
          i = /\s?auto?\s?/i,
          j = i.test(h);j && (h = h.replace(i, "") || "top"), f.detach().css({ top: 0, left: 0, display: "block" }).addClass(h).data("bs." + this.type, this), this.options.container ? f.appendTo(this.options.container) : f.insertAfter(this.$element), this.$element.trigger("inserted.bs." + this.type);var k = this.getPosition(),
          l = f[0].offsetWidth,
          m = f[0].offsetHeight;if (j) {
        var n = h,
            o = this.getPosition(this.$viewport);h = "bottom" == h && k.bottom + m > o.bottom ? "top" : "top" == h && k.top - m < o.top ? "bottom" : "right" == h && k.right + l > o.width ? "left" : "left" == h && k.left - l < o.left ? "right" : h, f.removeClass(n).addClass(h);
      }var p = this.getCalculatedOffset(h, k, l, m);this.applyPlacement(p, h);var q = function q() {
        var a = e.hoverState;e.$element.trigger("shown.bs." + e.type), e.hoverState = null, "out" == a && e.leave(e);
      };a.support.transition && this.$tip.hasClass("fade") ? f.one("bsTransitionEnd", q).emulateTransitionEnd(c.TRANSITION_DURATION) : q();
    }
  }, c.prototype.applyPlacement = function (b, c) {
    var d = this.tip(),
        e = d[0].offsetWidth,
        f = d[0].offsetHeight,
        g = parseInt(d.css("margin-top"), 10),
        h = parseInt(d.css("margin-left"), 10);isNaN(g) && (g = 0), isNaN(h) && (h = 0), b.top += g, b.left += h, a.offset.setOffset(d[0], a.extend({ using: function using(a) {
        d.css({ top: Math.round(a.top), left: Math.round(a.left) });
      } }, b), 0), d.addClass("in");var i = d[0].offsetWidth,
        j = d[0].offsetHeight;"top" == c && j != f && (b.top = b.top + f - j);var k = this.getViewportAdjustedDelta(c, b, i, j);k.left ? b.left += k.left : b.top += k.top;var l = /top|bottom/.test(c),
        m = l ? 2 * k.left - e + i : 2 * k.top - f + j,
        n = l ? "offsetWidth" : "offsetHeight";d.offset(b), this.replaceArrow(m, d[0][n], l);
  }, c.prototype.replaceArrow = function (a, b, c) {
    this.arrow().css(c ? "left" : "top", 50 * (1 - a / b) + "%").css(c ? "top" : "left", "");
  }, c.prototype.setContent = function () {
    var a = this.tip(),
        b = this.getTitle();a.find(".tooltip-inner")[this.options.html ? "html" : "text"](b), a.removeClass("fade in top bottom left right");
  }, c.prototype.hide = function (b) {
    function d() {
      "in" != e.hoverState && f.detach(), e.$element.removeAttr("aria-describedby").trigger("hidden.bs." + e.type), b && b();
    }var e = this,
        f = a(this.$tip),
        g = a.Event("hide.bs." + this.type);return this.$element.trigger(g), g.isDefaultPrevented() ? void 0 : (f.removeClass("in"), a.support.transition && f.hasClass("fade") ? f.one("bsTransitionEnd", d).emulateTransitionEnd(c.TRANSITION_DURATION) : d(), this.hoverState = null, this);
  }, c.prototype.fixTitle = function () {
    var a = this.$element;(a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "");
  }, c.prototype.hasContent = function () {
    return this.getTitle();
  }, c.prototype.getPosition = function (b) {
    b = b || this.$element;var c = b[0],
        d = "BODY" == c.tagName,
        e = c.getBoundingClientRect();null == e.width && (e = a.extend({}, e, { width: e.right - e.left, height: e.bottom - e.top }));var f = d ? { top: 0, left: 0 } : b.offset(),
        g = { scroll: d ? document.documentElement.scrollTop || document.body.scrollTop : b.scrollTop() },
        h = d ? { width: a(window).width(), height: a(window).height() } : null;return a.extend({}, e, g, h, f);
  }, c.prototype.getCalculatedOffset = function (a, b, c, d) {
    return "bottom" == a ? { top: b.top + b.height, left: b.left + b.width / 2 - c / 2 } : "top" == a ? { top: b.top - d, left: b.left + b.width / 2 - c / 2 } : "left" == a ? { top: b.top + b.height / 2 - d / 2, left: b.left - c } : { top: b.top + b.height / 2 - d / 2, left: b.left + b.width };
  }, c.prototype.getViewportAdjustedDelta = function (a, b, c, d) {
    var e = { top: 0, left: 0 };if (!this.$viewport) return e;var f = this.options.viewport && this.options.viewport.padding || 0,
        g = this.getPosition(this.$viewport);if (/right|left/.test(a)) {
      var h = b.top - f - g.scroll,
          i = b.top + f - g.scroll + d;h < g.top ? e.top = g.top - h : i > g.top + g.height && (e.top = g.top + g.height - i);
    } else {
      var j = b.left - f,
          k = b.left + f + c;j < g.left ? e.left = g.left - j : k > g.right && (e.left = g.left + g.width - k);
    }return e;
  }, c.prototype.getTitle = function () {
    var a,
        b = this.$element,
        c = this.options;return a = b.attr("data-original-title") || ("function" == typeof c.title ? c.title.call(b[0]) : c.title);
  }, c.prototype.getUID = function (a) {
    do {
      a += ~~(1e6 * Math.random());
    } while (document.getElementById(a));return a;
  }, c.prototype.tip = function () {
    if (!this.$tip && (this.$tip = a(this.options.template), 1 != this.$tip.length)) throw new Error(this.type + " `template` option must consist of exactly 1 top-level element!");return this.$tip;
  }, c.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
  }, c.prototype.enable = function () {
    this.enabled = !0;
  }, c.prototype.disable = function () {
    this.enabled = !1;
  }, c.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled;
  }, c.prototype.toggle = function (b) {
    var c = this;b && (c = a(b.currentTarget).data("bs." + this.type), c || (c = new this.constructor(b.currentTarget, this.getDelegateOptions()), a(b.currentTarget).data("bs." + this.type, c))), b ? (c.inState.click = !c.inState.click, c.isInStateTrue() ? c.enter(c) : c.leave(c)) : c.tip().hasClass("in") ? c.leave(c) : c.enter(c);
  }, c.prototype.destroy = function () {
    var a = this;clearTimeout(this.timeout), this.hide(function () {
      a.$element.off("." + a.type).removeData("bs." + a.type), a.$tip && a.$tip.detach(), a.$tip = null, a.$arrow = null, a.$viewport = null;
    });
  };var d = a.fn.tooltip;a.fn.tooltip = b, a.fn.tooltip.Constructor = c, a.fn.tooltip.noConflict = function () {
    return a.fn.tooltip = d, this;
  };
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.popover"),
          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;(e || !/destroy|hide/.test(b)) && (e || d.data("bs.popover", e = new c(this, f)), "string" == typeof b && e[b]());
    });
  }var c = function c(a, b) {
    this.init("popover", a, b);
  };if (!a.fn.tooltip) throw new Error("Popover requires tooltip.js");c.VERSION = "3.3.5", c.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>' }), c.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype), c.prototype.constructor = c, c.prototype.getDefaults = function () {
    return c.DEFAULTS;
  }, c.prototype.setContent = function () {
    var a = this.tip(),
        b = this.getTitle(),
        c = this.getContent();a.find(".popover-title")[this.options.html ? "html" : "text"](b), a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof c ? "html" : "append" : "text"](c), a.removeClass("fade top bottom left right in"), a.find(".popover-title").html() || a.find(".popover-title").hide();
  }, c.prototype.hasContent = function () {
    return this.getTitle() || this.getContent();
  }, c.prototype.getContent = function () {
    var a = this.$element,
        b = this.options;return a.attr("data-content") || ("function" == typeof b.content ? b.content.call(a[0]) : b.content);
  }, c.prototype.arrow = function () {
    return this.$arrow = this.$arrow || this.tip().find(".arrow");
  };var d = a.fn.popover;a.fn.popover = b, a.fn.popover.Constructor = c, a.fn.popover.noConflict = function () {
    return a.fn.popover = d, this;
  };
}(jQuery), +function (a) {
  "use strict";
  function b(c, d) {
    this.$body = a(document.body), this.$scrollElement = a(a(c).is(document.body) ? window : c), this.options = a.extend({}, b.DEFAULTS, d), this.selector = (this.options.target || "") + " .nav li > a", this.offsets = [], this.targets = [], this.activeTarget = null, this.scrollHeight = 0, this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this)), this.refresh(), this.process();
  }function c(c) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.scrollspy"),
          f = "object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) && c;e || d.data("bs.scrollspy", e = new b(this, f)), "string" == typeof c && e[c]();
    });
  }b.VERSION = "3.3.5", b.DEFAULTS = { offset: 10 }, b.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight);
  }, b.prototype.refresh = function () {
    var b = this,
        c = "offset",
        d = 0;this.offsets = [], this.targets = [], this.scrollHeight = this.getScrollHeight(), a.isWindow(this.$scrollElement[0]) || (c = "position", d = this.$scrollElement.scrollTop()), this.$body.find(this.selector).map(function () {
      var b = a(this),
          e = b.data("target") || b.attr("href"),
          f = /^#./.test(e) && a(e);return f && f.length && f.is(":visible") && [[f[c]().top + d, e]] || null;
    }).sort(function (a, b) {
      return a[0] - b[0];
    }).each(function () {
      b.offsets.push(this[0]), b.targets.push(this[1]);
    });
  }, b.prototype.process = function () {
    var a,
        b = this.$scrollElement.scrollTop() + this.options.offset,
        c = this.getScrollHeight(),
        d = this.options.offset + c - this.$scrollElement.height(),
        e = this.offsets,
        f = this.targets,
        g = this.activeTarget;if (this.scrollHeight != c && this.refresh(), b >= d) return g != (a = f[f.length - 1]) && this.activate(a);if (g && b < e[0]) return this.activeTarget = null, this.clear();for (a = e.length; a--;) {
      g != f[a] && b >= e[a] && (void 0 === e[a + 1] || b < e[a + 1]) && this.activate(f[a]);
    }
  }, b.prototype.activate = function (b) {
    this.activeTarget = b, this.clear();var c = this.selector + '[data-target="' + b + '"],' + this.selector + '[href="' + b + '"]',
        d = a(c).parents("li").addClass("active");d.parent(".dropdown-menu").length && (d = d.closest("li.dropdown").addClass("active")), d.trigger("activate.bs.scrollspy");
  }, b.prototype.clear = function () {
    a(this.selector).parentsUntil(this.options.target, ".active").removeClass("active");
  };var d = a.fn.scrollspy;a.fn.scrollspy = c, a.fn.scrollspy.Constructor = b, a.fn.scrollspy.noConflict = function () {
    return a.fn.scrollspy = d, this;
  }, a(window).on("load.bs.scrollspy.data-api", function () {
    a('[data-spy="scroll"]').each(function () {
      var b = a(this);c.call(b, b.data());
    });
  });
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.tab");e || d.data("bs.tab", e = new c(this)), "string" == typeof b && e[b]();
    });
  }var c = function c(b) {
    this.element = a(b);
  };c.VERSION = "3.3.5", c.TRANSITION_DURATION = 150, c.prototype.show = function () {
    var b = this.element,
        c = b.closest("ul:not(.dropdown-menu)"),
        d = b.data("target");if (d || (d = b.attr("href"), d = d && d.replace(/.*(?=#[^\s]*$)/, "")), !b.parent("li").hasClass("active")) {
      var e = c.find(".active:last a"),
          f = a.Event("hide.bs.tab", { relatedTarget: b[0] }),
          g = a.Event("show.bs.tab", { relatedTarget: e[0] });if (e.trigger(f), b.trigger(g), !g.isDefaultPrevented() && !f.isDefaultPrevented()) {
        var h = a(d);this.activate(b.closest("li"), c), this.activate(h, h.parent(), function () {
          e.trigger({ type: "hidden.bs.tab", relatedTarget: b[0] }), b.trigger({ type: "shown.bs.tab", relatedTarget: e[0] });
        });
      }
    }
  }, c.prototype.activate = function (b, d, e) {
    function f() {
      g.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1), b.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0), h ? (b[0].offsetWidth, b.addClass("in")) : b.removeClass("fade"), b.parent(".dropdown-menu").length && b.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0), e && e();
    }var g = d.find("> .active"),
        h = e && a.support.transition && (g.length && g.hasClass("fade") || !!d.find("> .fade").length);g.length && h ? g.one("bsTransitionEnd", f).emulateTransitionEnd(c.TRANSITION_DURATION) : f(), g.removeClass("in");
  };var d = a.fn.tab;a.fn.tab = b, a.fn.tab.Constructor = c, a.fn.tab.noConflict = function () {
    return a.fn.tab = d, this;
  };var e = function e(c) {
    c.preventDefault(), b.call(a(this), "show");
  };a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', e).on("click.bs.tab.data-api", '[data-toggle="pill"]', e);
}(jQuery), +function (a) {
  "use strict";
  function b(b) {
    return this.each(function () {
      var d = a(this),
          e = d.data("bs.affix"),
          f = "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b;e || d.data("bs.affix", e = new c(this, f)), "string" == typeof b && e[b]();
    });
  }var c = function c(b, d) {
    this.options = a.extend({}, c.DEFAULTS, d), this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this)), this.$element = a(b), this.affixed = null, this.unpin = null, this.pinnedOffset = null, this.checkPosition();
  };c.VERSION = "3.3.5", c.RESET = "affix affix-top affix-bottom", c.DEFAULTS = { offset: 0, target: window }, c.prototype.getState = function (a, b, c, d) {
    var e = this.$target.scrollTop(),
        f = this.$element.offset(),
        g = this.$target.height();if (null != c && "top" == this.affixed) return c > e ? "top" : !1;if ("bottom" == this.affixed) return null != c ? e + this.unpin <= f.top ? !1 : "bottom" : a - d >= e + g ? !1 : "bottom";var h = null == this.affixed,
        i = h ? e : f.top,
        j = h ? g : b;return null != c && c >= e ? "top" : null != d && i + j >= a - d ? "bottom" : !1;
  }, c.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset;this.$element.removeClass(c.RESET).addClass("affix");var a = this.$target.scrollTop(),
        b = this.$element.offset();return this.pinnedOffset = b.top - a;
  }, c.prototype.checkPositionWithEventLoop = function () {
    setTimeout(a.proxy(this.checkPosition, this), 1);
  }, c.prototype.checkPosition = function () {
    if (this.$element.is(":visible")) {
      var b = this.$element.height(),
          d = this.options.offset,
          e = d.top,
          f = d.bottom,
          g = Math.max(a(document).height(), a(document.body).height());"object" != (typeof d === "undefined" ? "undefined" : _typeof(d)) && (f = e = d), "function" == typeof e && (e = d.top(this.$element)), "function" == typeof f && (f = d.bottom(this.$element));var h = this.getState(g, b, e, f);if (this.affixed != h) {
        null != this.unpin && this.$element.css("top", "");var i = "affix" + (h ? "-" + h : ""),
            j = a.Event(i + ".bs.affix");if (this.$element.trigger(j), j.isDefaultPrevented()) return;this.affixed = h, this.unpin = "bottom" == h ? this.getPinnedOffset() : null, this.$element.removeClass(c.RESET).addClass(i).trigger(i.replace("affix", "affixed") + ".bs.affix");
      }"bottom" == h && this.$element.offset({ top: g - b - f });
    }
  };var d = a.fn.affix;a.fn.affix = b, a.fn.affix.Constructor = c, a.fn.affix.noConflict = function () {
    return a.fn.affix = d, this;
  }, a(window).on("load", function () {
    a('[data-spy="affix"]').each(function () {
      var c = a(this),
          d = c.data();d.offset = d.offset || {}, null != d.offsetBottom && (d.offset.bottom = d.offsetBottom), null != d.offsetTop && (d.offset.top = d.offsetTop), b.call(c, d);
    });
  });
}(jQuery);

/***/ }),
/* 3 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNTFkOWM3YTZlZjRiZTA2Y2ZkY2IiLCJ3ZWJwYWNrOi8vLy4vanMvc2VyZW50aS5qcyIsIndlYnBhY2s6Ly8vLi9qcy9qcXVlcnkucndkSW1hZ2VNYXBzLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9qcy9ib290c3RyYXAubWluLmpzIiwid2VicGFjazovLy8uL3Njc3Mvc3R5bGUuc2NzcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCIkIiwiaGlkZSIsIndpbmRvdyIsInNjcm9sbCIsInNjcm9sbFRvcCIsImZhZGVJbiIsImZhZGVPdXQiLCJvbiIsImFuaW1hdGUiLCJyd2RJbWFnZU1hcHMiLCJhIiwiZm4iLCJjIiwiYiIsImVhY2giLCJhdHRyIiwiZSIsImQiLCJsb2FkIiwiZyIsIm0iLCJuIiwiaiIsIm8iLCJJbWFnZSIsInNyYyIsIndpZHRoIiwiaGVpZ2h0IiwiZiIsImsiLCJpIiwicmVwbGFjZSIsImwiLCJmaW5kIiwiciIsImRhdGEiLCJxIiwic3BsaXQiLCJwIiwiQXJyYXkiLCJsZW5ndGgiLCJoIiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInJlc2l6ZSIsInRyaWdnZXIiLCJFcnJvciIsImpxdWVyeSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwic3R5bGUiLCJlbmQiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsIm9uZSIsInN1cHBvcnQiLCJzZXRUaW1lb3V0IiwiZXZlbnQiLCJzcGVjaWFsIiwiYnNUcmFuc2l0aW9uRW5kIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJ0YXJnZXQiLCJpcyIsImhhbmRsZU9iaiIsImhhbmRsZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsImNhbGwiLCJjbG9zZSIsIlZFUlNJT04iLCJUUkFOU0lUSU9OX0RVUkFUSU9OIiwicHJvdG90eXBlIiwiZGV0YWNoIiwicmVtb3ZlIiwicHJldmVudERlZmF1bHQiLCJjbG9zZXN0IiwiRXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJyZW1vdmVDbGFzcyIsImhhc0NsYXNzIiwiYWxlcnQiLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJ0b2dnbGUiLCJzZXRTdGF0ZSIsIiRlbGVtZW50Iiwib3B0aW9ucyIsImV4dGVuZCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJyZXNldFRleHQiLCJwcm94eSIsImFkZENsYXNzIiwicmVtb3ZlQXR0ciIsInByb3AiLCJ0b2dnbGVDbGFzcyIsImJ1dHRvbiIsInRlc3QiLCJ0eXBlIiwic2xpZGUiLCJ0byIsImludGVydmFsIiwicGF1c2UiLCJjeWNsZSIsIiRpbmRpY2F0b3JzIiwicGF1c2VkIiwic2xpZGluZyIsIiRhY3RpdmUiLCIkaXRlbXMiLCJrZXlib2FyZCIsImtleWRvd24iLCJkb2N1bWVudEVsZW1lbnQiLCJ3cmFwIiwidGFnTmFtZSIsIndoaWNoIiwicHJldiIsIm5leHQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJnZXRJdGVtSW5kZXgiLCJwYXJlbnQiLCJjaGlsZHJlbiIsImluZGV4IiwiZ2V0SXRlbUZvckRpcmVjdGlvbiIsImVxIiwicmVsYXRlZFRhcmdldCIsImRpcmVjdGlvbiIsIm9mZnNldFdpZHRoIiwiam9pbiIsImNhcm91c2VsIiwiJHRyaWdnZXIiLCJpZCIsInRyYW5zaXRpb25pbmciLCIkcGFyZW50IiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwic2hvdyIsImNhbWVsQ2FzZSIsIm9mZnNldEhlaWdodCIsImNvbGxhcHNlIiwiY29udGFpbnMiLCJpbnNlcnRBZnRlciIsInN0b3BQcm9wYWdhdGlvbiIsImRyb3Bkb3duIiwiJGJvZHkiLCJib2R5IiwiJGRpYWxvZyIsIiRiYWNrZHJvcCIsImlzU2hvd24iLCJvcmlnaW5hbEJvZHlQYWQiLCJzY3JvbGxiYXJXaWR0aCIsImlnbm9yZUJhY2tkcm9wQ2xpY2siLCJyZW1vdGUiLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiYmFja2Ryb3AiLCJjaGVja1Njcm9sbGJhciIsInNldFNjcm9sbGJhciIsImVzY2FwZSIsImFwcGVuZFRvIiwiYWRqdXN0RGlhbG9nIiwiZW5mb3JjZUZvY3VzIiwib2ZmIiwiaGlkZU1vZGFsIiwiaGFzIiwiaGFuZGxlVXBkYXRlIiwicmVzZXRBZGp1c3RtZW50cyIsInJlc2V0U2Nyb2xsYmFyIiwicmVtb3ZlQmFja2Ryb3AiLCJjdXJyZW50VGFyZ2V0IiwiZm9jdXMiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJjc3MiLCJwYWRkaW5nTGVmdCIsImJvZHlJc092ZXJmbG93aW5nIiwicGFkZGluZ1JpZ2h0IiwiaW5uZXJXaWR0aCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJpZ2h0IiwiTWF0aCIsImFicyIsImxlZnQiLCJjbGllbnRXaWR0aCIsIm1lYXN1cmVTY3JvbGxiYXIiLCJjbGFzc05hbWUiLCJhcHBlbmQiLCJyZW1vdmVDaGlsZCIsIm1vZGFsIiwiZW5hYmxlZCIsInRpbWVvdXQiLCJob3ZlclN0YXRlIiwiaW5TdGF0ZSIsImluaXQiLCJhbmltYXRpb24iLCJwbGFjZW1lbnQiLCJzZWxlY3RvciIsInRlbXBsYXRlIiwidGl0bGUiLCJkZWxheSIsImh0bWwiLCJjb250YWluZXIiLCJ2aWV3cG9ydCIsInBhZGRpbmciLCJnZXRPcHRpb25zIiwiJHZpZXdwb3J0IiwiaXNGdW5jdGlvbiIsImNsaWNrIiwiaG92ZXIiLCJjb25zdHJ1Y3RvciIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJnZXREZWxlZ2F0ZU9wdGlvbnMiLCJ0aXAiLCJjbGVhclRpbWVvdXQiLCJpc0luU3RhdGVUcnVlIiwiaGFzQ29udGVudCIsIm93bmVyRG9jdW1lbnQiLCJnZXRVSUQiLCJzZXRDb250ZW50IiwidG9wIiwiZGlzcGxheSIsImdldFBvc2l0aW9uIiwiYm90dG9tIiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwiJHRpcCIsImlzTmFOIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwidXNpbmciLCJyb3VuZCIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsInJlcGxhY2VBcnJvdyIsImFycm93IiwiZ2V0VGl0bGUiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsIiRhcnJvdyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInJlbW92ZURhdGEiLCJ0b29sdGlwIiwiY29udGVudCIsImdldENvbnRlbnQiLCJwb3BvdmVyIiwiJHNjcm9sbEVsZW1lbnQiLCJvZmZzZXRzIiwidGFyZ2V0cyIsImFjdGl2ZVRhcmdldCIsInByb2Nlc3MiLCJyZWZyZXNoIiwiZ2V0U2Nyb2xsSGVpZ2h0IiwibWF4IiwiaXNXaW5kb3ciLCJtYXAiLCJzb3J0IiwicHVzaCIsImFjdGl2YXRlIiwiY2xlYXIiLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwic2Nyb2xsc3B5IiwiZWxlbWVudCIsInRhYiIsIiR0YXJnZXQiLCJjaGVja1Bvc2l0aW9uIiwiY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AiLCJhZmZpeGVkIiwidW5waW4iLCJwaW5uZWRPZmZzZXQiLCJSRVNFVCIsImdldFN0YXRlIiwiZ2V0UGlubmVkT2Zmc2V0IiwiYWZmaXgiLCJvZmZzZXRCb3R0b20iLCJvZmZzZXRUb3AiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FB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R0FBc0IsWUFBVTtBQUFDLFdBQU83RSxFQUFFQyxFQUFGLENBQUtrUixLQUFMLEdBQVc1USxDQUFYLEVBQWEsSUFBcEI7QUFBeUIsR0FBaEcsRUFBaUdQLEVBQUVSLE1BQUYsRUFBVUssRUFBVixDQUFhLE1BQWIsRUFBb0IsWUFBVTtBQUFDRyxNQUFFLG9CQUFGLEVBQXdCSSxJQUF4QixDQUE2QixZQUFVO0FBQUMsVUFBSUYsSUFBRUYsRUFBRSxJQUFGLENBQU47QUFBQSxVQUFjTyxJQUFFTCxFQUFFdUIsSUFBRixFQUFoQixDQUF5QmxCLEVBQUU0TixNQUFGLEdBQVM1TixFQUFFNE4sTUFBRixJQUFVLEVBQW5CLEVBQXNCLFFBQU01TixFQUFFNlEsWUFBUixLQUF1QjdRLEVBQUU0TixNQUFGLENBQVNMLE1BQVQsR0FBZ0J2TixFQUFFNlEsWUFBekMsQ0FBdEIsRUFBNkUsUUFBTTdRLEVBQUU4USxTQUFSLEtBQW9COVEsRUFBRTROLE1BQUYsQ0FBU1IsR0FBVCxHQUFhcE4sRUFBRThRLFNBQW5DLENBQTdFLEVBQTJIbFIsRUFBRTJELElBQUYsQ0FBTzVELENBQVAsRUFBU0ssQ0FBVCxDQUEzSDtBQUF1SSxLQUF4TTtBQUEwTSxHQUF6TyxDQUFqRztBQUE0VSxDQUFuMkUsQ0FBbzJFbEIsTUFBcDJFLENBRDVtRSxDOzs7Ozs7QUNMeEYseUMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNTFkOWM3YTZlZjRiZTA2Y2ZkY2IiLCJpbXBvcnQgJy4vanF1ZXJ5LnJ3ZEltYWdlTWFwcy5taW4uanMnO1xyXG5cclxuaW1wb3J0ICcuL2Jvb3RzdHJhcC5taW4uanMnO1xyXG4vL2ltcG9ydCAnLi9kZXYvYm9vdHN0cmFwLmpzJztcclxuXHJcbi8vbWFzdGVyIHNjc3MgZmlsZVxyXG5pbXBvcnQgJy4uL3Njc3Mvc3R5bGUuc2Nzcyc7XHJcblxyXG5qUXVlcnkoZnVuY3Rpb24oJCkge1xyXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cclxuXHQvLyBoaWRlICNiYWNrLXRvcCBmaXJzdFxyXG5cdCQoXCIjYmFjay10b3BcIikuaGlkZSgpO1xyXG5cclxuXHQvLyBmYWRlIGluICNiYWNrLXRvcFxyXG5cclxuXHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gMTAwKSB7XHJcblx0XHRcdCQoJyNiYWNrLXRvcCcpLmZhZGVJbigpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JCgnI2JhY2stdG9wJykuZmFkZU91dCgpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHQvLyBzY3JvbGwgYm9keSB0byAwcHggb24gY2xpY2tcclxuXHQkKCcjYmFjay10b3AgYScpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKXtcclxuXHRcdCQoJ2JvZHksaHRtbCcpLmFuaW1hdGUoe1xyXG5cdFx0XHRzY3JvbGxUb3A6IDBcclxuXHRcdH0sIDgwMCk7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSk7XHJcblxyXG5cdCQoJ2ltZ1t1c2VtYXBdJykucndkSW1hZ2VNYXBzKCk7XHJcblx0XHJcblx0LyokKCdhcmVhJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblx0XHRhbGVydCgkKHRoaXMpLmF0dHIoJ2FsdCcpICsgJyBjbGlja2VkJyk7XHJcblx0fSk7Ki9cclxuXHJcbn0pO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9qcy9zZXJlbnRpLmpzIiwiLypcbiogcndkSW1hZ2VNYXBzIGpRdWVyeSBwbHVnaW4gdjEuNVxuKlxuKiBBbGxvd3MgaW1hZ2UgbWFwcyB0byBiZSB1c2VkIGluIGEgcmVzcG9uc2l2ZSBkZXNpZ24gYnkgcmVjYWxjdWxhdGluZyB0aGUgYXJlYSBjb29yZGluYXRlcyB0byBtYXRjaCB0aGUgYWN0dWFsIGltYWdlIHNpemUgb24gbG9hZCBhbmQgd2luZG93LnJlc2l6ZVxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgTWF0dCBTdG93XG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9zdG93YmFsbC9qUXVlcnktcndkSW1hZ2VNYXBzXG4qIGh0dHA6Ly9tYXR0c3Rvdy5jb21cbiogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4qL1xuOyhmdW5jdGlvbihhKXthLmZuLnJ3ZEltYWdlTWFwcz1mdW5jdGlvbigpe3ZhciBjPXRoaXM7dmFyIGI9ZnVuY3Rpb24oKXtjLmVhY2goZnVuY3Rpb24oKXtpZih0eXBlb2YoYSh0aGlzKS5hdHRyKFwidXNlbWFwXCIpKT09XCJ1bmRlZmluZWRcIil7cmV0dXJufXZhciBlPXRoaXMsZD1hKGUpO2EoXCI8aW1nIC8+XCIpLmxvYWQoZnVuY3Rpb24oKXt2YXIgZz1cIndpZHRoXCIsbT1cImhlaWdodFwiLG49ZC5hdHRyKGcpLGo9ZC5hdHRyKG0pO2lmKCFufHwhail7dmFyIG89bmV3IEltYWdlKCk7by5zcmM9ZC5hdHRyKFwic3JjXCIpO2lmKCFuKXtuPW8ud2lkdGh9aWYoIWope2o9by5oZWlnaHR9fXZhciBmPWQud2lkdGgoKS8xMDAsaz1kLmhlaWdodCgpLzEwMCxpPWQuYXR0cihcInVzZW1hcFwiKS5yZXBsYWNlKFwiI1wiLFwiXCIpLGw9XCJjb29yZHNcIjthKCdtYXBbbmFtZT1cIicraSsnXCJdJykuZmluZChcImFyZWFcIikuZWFjaChmdW5jdGlvbigpe3ZhciByPWEodGhpcyk7aWYoIXIuZGF0YShsKSl7ci5kYXRhKGwsci5hdHRyKGwpKX12YXIgcT1yLmRhdGEobCkuc3BsaXQoXCIsXCIpLHA9bmV3IEFycmF5KHEubGVuZ3RoKTtmb3IodmFyIGg9MDtoPHAubGVuZ3RoOysraCl7aWYoaCUyPT09MCl7cFtoXT1wYXJzZUludCgoKHFbaF0vbikqMTAwKSpmKX1lbHNle3BbaF09cGFyc2VJbnQoKChxW2hdL2opKjEwMCkqayl9fXIuYXR0cihsLHAudG9TdHJpbmcoKSl9KX0pLmF0dHIoXCJzcmNcIixkLmF0dHIoXCJzcmNcIikpfSl9O2Eod2luZG93KS5yZXNpemUoYikudHJpZ2dlcihcInJlc2l6ZVwiKTtyZXR1cm4gdGhpc319KShqUXVlcnkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2pxdWVyeS5yd2RJbWFnZU1hcHMubWluLmpzIiwiLyohXG4gKiBCb290c3RyYXAgdjMuMy41IChodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbSlcbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKi9cbmlmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBqUXVlcnkpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnlcIik7K2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO3ZhciBiPWEuZm4uanF1ZXJ5LnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi5cIik7aWYoYlswXTwyJiZiWzFdPDl8fDE9PWJbMF0mJjk9PWJbMV0mJmJbMl08MSl0aHJvdyBuZXcgRXJyb3IoXCJCb290c3RyYXAncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeSB2ZXJzaW9uIDEuOS4xIG9yIGhpZ2hlclwiKX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYigpe3ZhciBhPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJib290c3RyYXBcIiksYj17V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifTtmb3IodmFyIGMgaW4gYilpZih2b2lkIDAhPT1hLnN0eWxlW2NdKXJldHVybntlbmQ6YltjXX07cmV0dXJuITF9YS5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZD1mdW5jdGlvbihiKXt2YXIgYz0hMSxkPXRoaXM7YSh0aGlzKS5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixmdW5jdGlvbigpe2M9ITB9KTt2YXIgZT1mdW5jdGlvbigpe2N8fGEoZCkudHJpZ2dlcihhLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpfTtyZXR1cm4gc2V0VGltZW91dChlLGIpLHRoaXN9LGEoZnVuY3Rpb24oKXthLnN1cHBvcnQudHJhbnNpdGlvbj1iKCksYS5zdXBwb3J0LnRyYW5zaXRpb24mJihhLmV2ZW50LnNwZWNpYWwuYnNUcmFuc2l0aW9uRW5kPXtiaW5kVHlwZTphLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsZGVsZWdhdGVUeXBlOmEuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxoYW5kbGU6ZnVuY3Rpb24oYil7cmV0dXJuIGEoYi50YXJnZXQpLmlzKHRoaXMpP2IuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOnZvaWQgMH19KX0pfShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGU9Yy5kYXRhKFwiYnMuYWxlcnRcIik7ZXx8Yy5kYXRhKFwiYnMuYWxlcnRcIixlPW5ldyBkKHRoaXMpKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmZVtiXS5jYWxsKGMpfSl9dmFyIGM9J1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXScsZD1mdW5jdGlvbihiKXthKGIpLm9uKFwiY2xpY2tcIixjLHRoaXMuY2xvc2UpfTtkLlZFUlNJT049XCIzLjMuNVwiLGQuVFJBTlNJVElPTl9EVVJBVElPTj0xNTAsZC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oYil7ZnVuY3Rpb24gYygpe2cuZGV0YWNoKCkudHJpZ2dlcihcImNsb3NlZC5icy5hbGVydFwiKS5yZW1vdmUoKX12YXIgZT1hKHRoaXMpLGY9ZS5hdHRyKFwiZGF0YS10YXJnZXRcIik7Znx8KGY9ZS5hdHRyKFwiaHJlZlwiKSxmPWYmJmYucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLyxcIlwiKSk7dmFyIGc9YShmKTtiJiZiLnByZXZlbnREZWZhdWx0KCksZy5sZW5ndGh8fChnPWUuY2xvc2VzdChcIi5hbGVydFwiKSksZy50cmlnZ2VyKGI9YS5FdmVudChcImNsb3NlLmJzLmFsZXJ0XCIpKSxiLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwoZy5yZW1vdmVDbGFzcyhcImluXCIpLGEuc3VwcG9ydC50cmFuc2l0aW9uJiZnLmhhc0NsYXNzKFwiZmFkZVwiKT9nLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGMpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGQuVFJBTlNJVElPTl9EVVJBVElPTik6YygpKX07dmFyIGU9YS5mbi5hbGVydDthLmZuLmFsZXJ0PWIsYS5mbi5hbGVydC5Db25zdHJ1Y3Rvcj1kLGEuZm4uYWxlcnQubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLmZuLmFsZXJ0PWUsdGhpc30sYShkb2N1bWVudCkub24oXCJjbGljay5icy5hbGVydC5kYXRhLWFwaVwiLGMsZC5wcm90b3R5cGUuY2xvc2UpfShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGU9ZC5kYXRhKFwiYnMuYnV0dG9uXCIpLGY9XCJvYmplY3RcIj09dHlwZW9mIGImJmI7ZXx8ZC5kYXRhKFwiYnMuYnV0dG9uXCIsZT1uZXcgYyh0aGlzLGYpKSxcInRvZ2dsZVwiPT1iP2UudG9nZ2xlKCk6YiYmZS5zZXRTdGF0ZShiKX0pfXZhciBjPWZ1bmN0aW9uKGIsZCl7dGhpcy4kZWxlbWVudD1hKGIpLHRoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSxjLkRFRkFVTFRTLGQpLHRoaXMuaXNMb2FkaW5nPSExfTtjLlZFUlNJT049XCIzLjMuNVwiLGMuREVGQVVMVFM9e2xvYWRpbmdUZXh0OlwibG9hZGluZy4uLlwifSxjLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihiKXt2YXIgYz1cImRpc2FibGVkXCIsZD10aGlzLiRlbGVtZW50LGU9ZC5pcyhcImlucHV0XCIpP1widmFsXCI6XCJodG1sXCIsZj1kLmRhdGEoKTtiKz1cIlRleHRcIixudWxsPT1mLnJlc2V0VGV4dCYmZC5kYXRhKFwicmVzZXRUZXh0XCIsZFtlXSgpKSxzZXRUaW1lb3V0KGEucHJveHkoZnVuY3Rpb24oKXtkW2VdKG51bGw9PWZbYl0/dGhpcy5vcHRpb25zW2JdOmZbYl0pLFwibG9hZGluZ1RleHRcIj09Yj8odGhpcy5pc0xvYWRpbmc9ITAsZC5hZGRDbGFzcyhjKS5hdHRyKGMsYykpOnRoaXMuaXNMb2FkaW5nJiYodGhpcy5pc0xvYWRpbmc9ITEsZC5yZW1vdmVDbGFzcyhjKS5yZW1vdmVBdHRyKGMpKX0sdGhpcyksMCl9LGMucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbigpe3ZhciBhPSEwLGI9dGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJyk7aWYoYi5sZW5ndGgpe3ZhciBjPXRoaXMuJGVsZW1lbnQuZmluZChcImlucHV0XCIpO1wicmFkaW9cIj09Yy5wcm9wKFwidHlwZVwiKT8oYy5wcm9wKFwiY2hlY2tlZFwiKSYmKGE9ITEpLGIuZmluZChcIi5hY3RpdmVcIikucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy4kZWxlbWVudC5hZGRDbGFzcyhcImFjdGl2ZVwiKSk6XCJjaGVja2JveFwiPT1jLnByb3AoXCJ0eXBlXCIpJiYoYy5wcm9wKFwiY2hlY2tlZFwiKSE9PXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJhY3RpdmVcIikmJihhPSExKSx0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKFwiYWN0aXZlXCIpKSxjLnByb3AoXCJjaGVja2VkXCIsdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImFjdGl2ZVwiKSksYSYmYy50cmlnZ2VyKFwiY2hhbmdlXCIpfWVsc2UgdGhpcy4kZWxlbWVudC5hdHRyKFwiYXJpYS1wcmVzc2VkXCIsIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJhY3RpdmVcIikpLHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoXCJhY3RpdmVcIil9O3ZhciBkPWEuZm4uYnV0dG9uO2EuZm4uYnV0dG9uPWIsYS5mbi5idXR0b24uQ29uc3RydWN0b3I9YyxhLmZuLmJ1dHRvbi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uYnV0dG9uPWQsdGhpc30sYShkb2N1bWVudCkub24oXCJjbGljay5icy5idXR0b24uZGF0YS1hcGlcIiwnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsZnVuY3Rpb24oYyl7dmFyIGQ9YShjLnRhcmdldCk7ZC5oYXNDbGFzcyhcImJ0blwiKXx8KGQ9ZC5jbG9zZXN0KFwiLmJ0blwiKSksYi5jYWxsKGQsXCJ0b2dnbGVcIiksYShjLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScpfHxhKGMudGFyZ2V0KS5pcygnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyl8fGMucHJldmVudERlZmF1bHQoKX0pLm9uKFwiZm9jdXMuYnMuYnV0dG9uLmRhdGEtYXBpIGJsdXIuYnMuYnV0dG9uLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLGZ1bmN0aW9uKGIpe2EoYi50YXJnZXQpLmNsb3Nlc3QoXCIuYnRuXCIpLnRvZ2dsZUNsYXNzKFwiZm9jdXNcIiwvXmZvY3VzKGluKT8kLy50ZXN0KGIudHlwZSkpfSl9KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZT1kLmRhdGEoXCJicy5jYXJvdXNlbFwiKSxmPWEuZXh0ZW5kKHt9LGMuREVGQVVMVFMsZC5kYXRhKCksXCJvYmplY3RcIj09dHlwZW9mIGImJmIpLGc9XCJzdHJpbmdcIj09dHlwZW9mIGI/YjpmLnNsaWRlO2V8fGQuZGF0YShcImJzLmNhcm91c2VsXCIsZT1uZXcgYyh0aGlzLGYpKSxcIm51bWJlclwiPT10eXBlb2YgYj9lLnRvKGIpOmc/ZVtnXSgpOmYuaW50ZXJ2YWwmJmUucGF1c2UoKS5jeWNsZSgpfSl9dmFyIGM9ZnVuY3Rpb24oYixjKXt0aGlzLiRlbGVtZW50PWEoYiksdGhpcy4kaW5kaWNhdG9ycz10aGlzLiRlbGVtZW50LmZpbmQoXCIuY2Fyb3VzZWwtaW5kaWNhdG9yc1wiKSx0aGlzLm9wdGlvbnM9Yyx0aGlzLnBhdXNlZD1udWxsLHRoaXMuc2xpZGluZz1udWxsLHRoaXMuaW50ZXJ2YWw9bnVsbCx0aGlzLiRhY3RpdmU9bnVsbCx0aGlzLiRpdGVtcz1udWxsLHRoaXMub3B0aW9ucy5rZXlib2FyZCYmdGhpcy4kZWxlbWVudC5vbihcImtleWRvd24uYnMuY2Fyb3VzZWxcIixhLnByb3h5KHRoaXMua2V5ZG93bix0aGlzKSksXCJob3ZlclwiPT10aGlzLm9wdGlvbnMucGF1c2UmJiEoXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkmJnRoaXMuJGVsZW1lbnQub24oXCJtb3VzZWVudGVyLmJzLmNhcm91c2VsXCIsYS5wcm94eSh0aGlzLnBhdXNlLHRoaXMpKS5vbihcIm1vdXNlbGVhdmUuYnMuY2Fyb3VzZWxcIixhLnByb3h5KHRoaXMuY3ljbGUsdGhpcykpfTtjLlZFUlNJT049XCIzLjMuNVwiLGMuVFJBTlNJVElPTl9EVVJBVElPTj02MDAsYy5ERUZBVUxUUz17aW50ZXJ2YWw6NWUzLHBhdXNlOlwiaG92ZXJcIix3cmFwOiEwLGtleWJvYXJkOiEwfSxjLnByb3RvdHlwZS5rZXlkb3duPWZ1bmN0aW9uKGEpe2lmKCEvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGEudGFyZ2V0LnRhZ05hbWUpKXtzd2l0Y2goYS53aGljaCl7Y2FzZSAzNzp0aGlzLnByZXYoKTticmVhaztjYXNlIDM5OnRoaXMubmV4dCgpO2JyZWFrO2RlZmF1bHQ6cmV0dXJufWEucHJldmVudERlZmF1bHQoKX19LGMucHJvdG90eXBlLmN5Y2xlPWZ1bmN0aW9uKGIpe3JldHVybiBifHwodGhpcy5wYXVzZWQ9ITEpLHRoaXMuaW50ZXJ2YWwmJmNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbCksdGhpcy5vcHRpb25zLmludGVydmFsJiYhdGhpcy5wYXVzZWQmJih0aGlzLmludGVydmFsPXNldEludGVydmFsKGEucHJveHkodGhpcy5uZXh0LHRoaXMpLHRoaXMub3B0aW9ucy5pbnRlcnZhbCkpLHRoaXN9LGMucHJvdG90eXBlLmdldEl0ZW1JbmRleD1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy4kaXRlbXM9YS5wYXJlbnQoKS5jaGlsZHJlbihcIi5pdGVtXCIpLHRoaXMuJGl0ZW1zLmluZGV4KGF8fHRoaXMuJGFjdGl2ZSl9LGMucHJvdG90eXBlLmdldEl0ZW1Gb3JEaXJlY3Rpb249ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmdldEl0ZW1JbmRleChiKSxkPVwicHJldlwiPT1hJiYwPT09Y3x8XCJuZXh0XCI9PWEmJmM9PXRoaXMuJGl0ZW1zLmxlbmd0aC0xO2lmKGQmJiF0aGlzLm9wdGlvbnMud3JhcClyZXR1cm4gYjt2YXIgZT1cInByZXZcIj09YT8tMToxLGY9KGMrZSkldGhpcy4kaXRlbXMubGVuZ3RoO3JldHVybiB0aGlzLiRpdGVtcy5lcShmKX0sYy5wcm90b3R5cGUudG89ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcyxjPXRoaXMuZ2V0SXRlbUluZGV4KHRoaXMuJGFjdGl2ZT10aGlzLiRlbGVtZW50LmZpbmQoXCIuaXRlbS5hY3RpdmVcIikpO3JldHVybiBhPnRoaXMuJGl0ZW1zLmxlbmd0aC0xfHwwPmE/dm9pZCAwOnRoaXMuc2xpZGluZz90aGlzLiRlbGVtZW50Lm9uZShcInNsaWQuYnMuY2Fyb3VzZWxcIixmdW5jdGlvbigpe2IudG8oYSl9KTpjPT1hP3RoaXMucGF1c2UoKS5jeWNsZSgpOnRoaXMuc2xpZGUoYT5jP1wibmV4dFwiOlwicHJldlwiLHRoaXMuJGl0ZW1zLmVxKGEpKX0sYy5wcm90b3R5cGUucGF1c2U9ZnVuY3Rpb24oYil7cmV0dXJuIGJ8fCh0aGlzLnBhdXNlZD0hMCksdGhpcy4kZWxlbWVudC5maW5kKFwiLm5leHQsIC5wcmV2XCIpLmxlbmd0aCYmYS5zdXBwb3J0LnRyYW5zaXRpb24mJih0aGlzLiRlbGVtZW50LnRyaWdnZXIoYS5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKSx0aGlzLmN5Y2xlKCEwKSksdGhpcy5pbnRlcnZhbD1jbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpLHRoaXN9LGMucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zbGlkaW5nP3ZvaWQgMDp0aGlzLnNsaWRlKFwibmV4dFwiKX0sYy5wcm90b3R5cGUucHJldj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnNsaWRpbmc/dm9pZCAwOnRoaXMuc2xpZGUoXCJwcmV2XCIpfSxjLnByb3RvdHlwZS5zbGlkZT1mdW5jdGlvbihiLGQpe3ZhciBlPXRoaXMuJGVsZW1lbnQuZmluZChcIi5pdGVtLmFjdGl2ZVwiKSxmPWR8fHRoaXMuZ2V0SXRlbUZvckRpcmVjdGlvbihiLGUpLGc9dGhpcy5pbnRlcnZhbCxoPVwibmV4dFwiPT1iP1wibGVmdFwiOlwicmlnaHRcIixpPXRoaXM7aWYoZi5oYXNDbGFzcyhcImFjdGl2ZVwiKSlyZXR1cm4gdGhpcy5zbGlkaW5nPSExO3ZhciBqPWZbMF0saz1hLkV2ZW50KFwic2xpZGUuYnMuY2Fyb3VzZWxcIix7cmVsYXRlZFRhcmdldDpqLGRpcmVjdGlvbjpofSk7aWYodGhpcy4kZWxlbWVudC50cmlnZ2VyKGspLCFrLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtpZih0aGlzLnNsaWRpbmc9ITAsZyYmdGhpcy5wYXVzZSgpLHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKXt0aGlzLiRpbmRpY2F0b3JzLmZpbmQoXCIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO3ZhciBsPWEodGhpcy4kaW5kaWNhdG9ycy5jaGlsZHJlbigpW3RoaXMuZ2V0SXRlbUluZGV4KGYpXSk7bCYmbC5hZGRDbGFzcyhcImFjdGl2ZVwiKX12YXIgbT1hLkV2ZW50KFwic2xpZC5icy5jYXJvdXNlbFwiLHtyZWxhdGVkVGFyZ2V0OmosZGlyZWN0aW9uOmh9KTtyZXR1cm4gYS5zdXBwb3J0LnRyYW5zaXRpb24mJnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJzbGlkZVwiKT8oZi5hZGRDbGFzcyhiKSxmWzBdLm9mZnNldFdpZHRoLGUuYWRkQ2xhc3MoaCksZi5hZGRDbGFzcyhoKSxlLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGZ1bmN0aW9uKCl7Zi5yZW1vdmVDbGFzcyhbYixoXS5qb2luKFwiIFwiKSkuYWRkQ2xhc3MoXCJhY3RpdmVcIiksZS5yZW1vdmVDbGFzcyhbXCJhY3RpdmVcIixoXS5qb2luKFwiIFwiKSksaS5zbGlkaW5nPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLiRlbGVtZW50LnRyaWdnZXIobSl9LDApfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoYy5UUkFOU0lUSU9OX0RVUkFUSU9OKSk6KGUucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksZi5hZGRDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLnNsaWRpbmc9ITEsdGhpcy4kZWxlbWVudC50cmlnZ2VyKG0pKSxnJiZ0aGlzLmN5Y2xlKCksdGhpc319O3ZhciBkPWEuZm4uY2Fyb3VzZWw7YS5mbi5jYXJvdXNlbD1iLGEuZm4uY2Fyb3VzZWwuQ29uc3RydWN0b3I9YyxhLmZuLmNhcm91c2VsLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5jYXJvdXNlbD1kLHRoaXN9O3ZhciBlPWZ1bmN0aW9uKGMpe3ZhciBkLGU9YSh0aGlzKSxmPWEoZS5hdHRyKFwiZGF0YS10YXJnZXRcIil8fChkPWUuYXR0cihcImhyZWZcIikpJiZkLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sXCJcIikpO2lmKGYuaGFzQ2xhc3MoXCJjYXJvdXNlbFwiKSl7dmFyIGc9YS5leHRlbmQoe30sZi5kYXRhKCksZS5kYXRhKCkpLGg9ZS5hdHRyKFwiZGF0YS1zbGlkZS10b1wiKTtoJiYoZy5pbnRlcnZhbD0hMSksYi5jYWxsKGYsZyksaCYmZi5kYXRhKFwiYnMuY2Fyb3VzZWxcIikudG8oaCksYy5wcmV2ZW50RGVmYXVsdCgpfX07YShkb2N1bWVudCkub24oXCJjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaVwiLFwiW2RhdGEtc2xpZGVdXCIsZSkub24oXCJjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaVwiLFwiW2RhdGEtc2xpZGUtdG9dXCIsZSksYSh3aW5kb3cpLm9uKFwibG9hZFwiLGZ1bmN0aW9uKCl7YSgnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJykuZWFjaChmdW5jdGlvbigpe3ZhciBjPWEodGhpcyk7Yi5jYWxsKGMsYy5kYXRhKCkpfSl9KX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXt2YXIgYyxkPWIuYXR0cihcImRhdGEtdGFyZ2V0XCIpfHwoYz1iLmF0dHIoXCJocmVmXCIpKSYmYy5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLFwiXCIpO3JldHVybiBhKGQpfWZ1bmN0aW9uIGMoYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjPWEodGhpcyksZT1jLmRhdGEoXCJicy5jb2xsYXBzZVwiKSxmPWEuZXh0ZW5kKHt9LGQuREVGQVVMVFMsYy5kYXRhKCksXCJvYmplY3RcIj09dHlwZW9mIGImJmIpOyFlJiZmLnRvZ2dsZSYmL3Nob3d8aGlkZS8udGVzdChiKSYmKGYudG9nZ2xlPSExKSxlfHxjLmRhdGEoXCJicy5jb2xsYXBzZVwiLGU9bmV3IGQodGhpcyxmKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJmVbYl0oKX0pfXZhciBkPWZ1bmN0aW9uKGIsYyl7dGhpcy4kZWxlbWVudD1hKGIpLHRoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSxkLkRFRkFVTFRTLGMpLHRoaXMuJHRyaWdnZXI9YSgnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1baHJlZj1cIiMnK2IuaWQrJ1wiXSxbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnK2IuaWQrJ1wiXScpLHRoaXMudHJhbnNpdGlvbmluZz1udWxsLHRoaXMub3B0aW9ucy5wYXJlbnQ/dGhpcy4kcGFyZW50PXRoaXMuZ2V0UGFyZW50KCk6dGhpcy5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy4kZWxlbWVudCx0aGlzLiR0cmlnZ2VyKSx0aGlzLm9wdGlvbnMudG9nZ2xlJiZ0aGlzLnRvZ2dsZSgpfTtkLlZFUlNJT049XCIzLjMuNVwiLGQuVFJBTlNJVElPTl9EVVJBVElPTj0zNTAsZC5ERUZBVUxUUz17dG9nZ2xlOiEwfSxkLnByb3RvdHlwZS5kaW1lbnNpb249ZnVuY3Rpb24oKXt2YXIgYT10aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwid2lkdGhcIik7cmV0dXJuIGE/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJ9LGQucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXtpZighdGhpcy50cmFuc2l0aW9uaW5nJiYhdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImluXCIpKXt2YXIgYixlPXRoaXMuJHBhcmVudCYmdGhpcy4kcGFyZW50LmNoaWxkcmVuKFwiLnBhbmVsXCIpLmNoaWxkcmVuKFwiLmluLCAuY29sbGFwc2luZ1wiKTtpZighKGUmJmUubGVuZ3RoJiYoYj1lLmRhdGEoXCJicy5jb2xsYXBzZVwiKSxiJiZiLnRyYW5zaXRpb25pbmcpKSl7dmFyIGY9YS5FdmVudChcInNob3cuYnMuY29sbGFwc2VcIik7aWYodGhpcy4kZWxlbWVudC50cmlnZ2VyKGYpLCFmLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtlJiZlLmxlbmd0aCYmKGMuY2FsbChlLFwiaGlkZVwiKSxifHxlLmRhdGEoXCJicy5jb2xsYXBzZVwiLG51bGwpKTt2YXIgZz10aGlzLmRpbWVuc2lvbigpO3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzZVwiKS5hZGRDbGFzcyhcImNvbGxhcHNpbmdcIilbZ10oMCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksdGhpcy4kdHJpZ2dlci5yZW1vdmVDbGFzcyhcImNvbGxhcHNlZFwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCEwKSx0aGlzLnRyYW5zaXRpb25pbmc9MTt2YXIgaD1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzaW5nXCIpLmFkZENsYXNzKFwiY29sbGFwc2UgaW5cIilbZ10oXCJcIiksdGhpcy50cmFuc2l0aW9uaW5nPTAsdGhpcy4kZWxlbWVudC50cmlnZ2VyKFwic2hvd24uYnMuY29sbGFwc2VcIil9O2lmKCFhLnN1cHBvcnQudHJhbnNpdGlvbilyZXR1cm4gaC5jYWxsKHRoaXMpO3ZhciBpPWEuY2FtZWxDYXNlKFtcInNjcm9sbFwiLGddLmpvaW4oXCItXCIpKTt0aGlzLiRlbGVtZW50Lm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGEucHJveHkoaCx0aGlzKSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoZC5UUkFOU0lUSU9OX0RVUkFUSU9OKVtnXSh0aGlzLiRlbGVtZW50WzBdW2ldKX19fX0sZC5wcm90b3R5cGUuaGlkZT1mdW5jdGlvbigpe2lmKCF0aGlzLnRyYW5zaXRpb25pbmcmJnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJpblwiKSl7dmFyIGI9YS5FdmVudChcImhpZGUuYnMuY29sbGFwc2VcIik7aWYodGhpcy4kZWxlbWVudC50cmlnZ2VyKGIpLCFiLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt2YXIgYz10aGlzLmRpbWVuc2lvbigpO3RoaXMuJGVsZW1lbnRbY10odGhpcy4kZWxlbWVudFtjXSgpKVswXS5vZmZzZXRIZWlnaHQsdGhpcy4kZWxlbWVudC5hZGRDbGFzcyhcImNvbGxhcHNpbmdcIikucmVtb3ZlQ2xhc3MoXCJjb2xsYXBzZSBpblwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCExKSx0aGlzLiR0cmlnZ2VyLmFkZENsYXNzKFwiY29sbGFwc2VkXCIpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITEpLHRoaXMudHJhbnNpdGlvbmluZz0xO3ZhciBlPWZ1bmN0aW9uKCl7dGhpcy50cmFuc2l0aW9uaW5nPTAsdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhcImNvbGxhcHNpbmdcIikuYWRkQ2xhc3MoXCJjb2xsYXBzZVwiKS50cmlnZ2VyKFwiaGlkZGVuLmJzLmNvbGxhcHNlXCIpfTtyZXR1cm4gYS5zdXBwb3J0LnRyYW5zaXRpb24/dm9pZCB0aGlzLiRlbGVtZW50W2NdKDApLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGEucHJveHkoZSx0aGlzKSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoZC5UUkFOU0lUSU9OX0RVUkFUSU9OKTplLmNhbGwodGhpcyl9fX0sZC5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKCl7dGhpc1t0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKFwiaW5cIik/XCJoaWRlXCI6XCJzaG93XCJdKCl9LGQucHJvdG90eXBlLmdldFBhcmVudD1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMub3B0aW9ucy5wYXJlbnQpLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyt0aGlzLm9wdGlvbnMucGFyZW50KydcIl0nKS5lYWNoKGEucHJveHkoZnVuY3Rpb24oYyxkKXt2YXIgZT1hKGQpO3RoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGIoZSksZSl9LHRoaXMpKS5lbmQoKX0sZC5wcm90b3R5cGUuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzPWZ1bmN0aW9uKGEsYil7dmFyIGM9YS5oYXNDbGFzcyhcImluXCIpO2EuYXR0cihcImFyaWEtZXhwYW5kZWRcIixjKSxiLnRvZ2dsZUNsYXNzKFwiY29sbGFwc2VkXCIsIWMpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsYyl9O3ZhciBlPWEuZm4uY29sbGFwc2U7YS5mbi5jb2xsYXBzZT1jLGEuZm4uY29sbGFwc2UuQ29uc3RydWN0b3I9ZCxhLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi5jb2xsYXBzZT1lLHRoaXN9LGEoZG9jdW1lbnQpLm9uKFwiY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGlcIiwnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nLGZ1bmN0aW9uKGQpe3ZhciBlPWEodGhpcyk7ZS5hdHRyKFwiZGF0YS10YXJnZXRcIil8fGQucHJldmVudERlZmF1bHQoKTt2YXIgZj1iKGUpLGc9Zi5kYXRhKFwiYnMuY29sbGFwc2VcIiksaD1nP1widG9nZ2xlXCI6ZS5kYXRhKCk7Yy5jYWxsKGYsaCl9KX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXt2YXIgYz1iLmF0dHIoXCJkYXRhLXRhcmdldFwiKTtjfHwoYz1iLmF0dHIoXCJocmVmXCIpLGM9YyYmLyNbQS1aYS16XS8udGVzdChjKSYmYy5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLFwiXCIpKTt2YXIgZD1jJiZhKGMpO3JldHVybiBkJiZkLmxlbmd0aD9kOmIucGFyZW50KCl9ZnVuY3Rpb24gYyhjKXtjJiYzPT09Yy53aGljaHx8KGEoZSkucmVtb3ZlKCksYShmKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWIoZCksZj17cmVsYXRlZFRhcmdldDp0aGlzfTtlLmhhc0NsYXNzKFwib3BlblwiKSYmKGMmJlwiY2xpY2tcIj09Yy50eXBlJiYvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGMudGFyZ2V0LnRhZ05hbWUpJiZhLmNvbnRhaW5zKGVbMF0sYy50YXJnZXQpfHwoZS50cmlnZ2VyKGM9YS5FdmVudChcImhpZGUuYnMuZHJvcGRvd25cIixmKSksYy5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KGQuYXR0cihcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLGUucmVtb3ZlQ2xhc3MoXCJvcGVuXCIpLnRyaWdnZXIoXCJoaWRkZW4uYnMuZHJvcGRvd25cIixmKSkpKX0pKX1mdW5jdGlvbiBkKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGQ9Yy5kYXRhKFwiYnMuZHJvcGRvd25cIik7ZHx8Yy5kYXRhKFwiYnMuZHJvcGRvd25cIixkPW5ldyBnKHRoaXMpKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmZFtiXS5jYWxsKGMpfSl9dmFyIGU9XCIuZHJvcGRvd24tYmFja2Ryb3BcIixmPSdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsZz1mdW5jdGlvbihiKXthKGIpLm9uKFwiY2xpY2suYnMuZHJvcGRvd25cIix0aGlzLnRvZ2dsZSl9O2cuVkVSU0lPTj1cIjMuMy41XCIsZy5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKGQpe3ZhciBlPWEodGhpcyk7aWYoIWUuaXMoXCIuZGlzYWJsZWQsIDpkaXNhYmxlZFwiKSl7dmFyIGY9YihlKSxnPWYuaGFzQ2xhc3MoXCJvcGVuXCIpO2lmKGMoKSwhZyl7XCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmIWYuY2xvc2VzdChcIi5uYXZiYXItbmF2XCIpLmxlbmd0aCYmYShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5hZGRDbGFzcyhcImRyb3Bkb3duLWJhY2tkcm9wXCIpLmluc2VydEFmdGVyKGEodGhpcykpLm9uKFwiY2xpY2tcIixjKTt2YXIgaD17cmVsYXRlZFRhcmdldDp0aGlzfTtpZihmLnRyaWdnZXIoZD1hLkV2ZW50KFwic2hvdy5icy5kcm9wZG93blwiLGgpKSxkLmlzRGVmYXVsdFByZXZlbnRlZCgpKXJldHVybjtlLnRyaWdnZXIoXCJmb2N1c1wiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLFwidHJ1ZVwiKSxmLnRvZ2dsZUNsYXNzKFwib3BlblwiKS50cmlnZ2VyKFwic2hvd24uYnMuZHJvcGRvd25cIixoKX1yZXR1cm4hMX19LGcucHJvdG90eXBlLmtleWRvd249ZnVuY3Rpb24oYyl7aWYoLygzOHw0MHwyN3wzMikvLnRlc3QoYy53aGljaCkmJiEvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGMudGFyZ2V0LnRhZ05hbWUpKXt2YXIgZD1hKHRoaXMpO2lmKGMucHJldmVudERlZmF1bHQoKSxjLnN0b3BQcm9wYWdhdGlvbigpLCFkLmlzKFwiLmRpc2FibGVkLCA6ZGlzYWJsZWRcIikpe3ZhciBlPWIoZCksZz1lLmhhc0NsYXNzKFwib3BlblwiKTtpZighZyYmMjchPWMud2hpY2h8fGcmJjI3PT1jLndoaWNoKXJldHVybiAyNz09Yy53aGljaCYmZS5maW5kKGYpLnRyaWdnZXIoXCJmb2N1c1wiKSxkLnRyaWdnZXIoXCJjbGlja1wiKTt2YXIgaD1cIiBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGFcIixpPWUuZmluZChcIi5kcm9wZG93bi1tZW51XCIraCk7aWYoaS5sZW5ndGgpe3ZhciBqPWkuaW5kZXgoYy50YXJnZXQpOzM4PT1jLndoaWNoJiZqPjAmJmotLSw0MD09Yy53aGljaCYmajxpLmxlbmd0aC0xJiZqKyssfmp8fChqPTApLGkuZXEoaikudHJpZ2dlcihcImZvY3VzXCIpfX19fTt2YXIgaD1hLmZuLmRyb3Bkb3duO2EuZm4uZHJvcGRvd249ZCxhLmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yPWcsYS5mbi5kcm9wZG93bi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uZHJvcGRvd249aCx0aGlzfSxhKGRvY3VtZW50KS5vbihcImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsYykub24oXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLFwiLmRyb3Bkb3duIGZvcm1cIixmdW5jdGlvbihhKXthLnN0b3BQcm9wYWdhdGlvbigpfSkub24oXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLGYsZy5wcm90b3R5cGUudG9nZ2xlKS5vbihcImtleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGlcIixmLGcucHJvdG90eXBlLmtleWRvd24pLm9uKFwia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaVwiLFwiLmRyb3Bkb3duLW1lbnVcIixnLnByb3RvdHlwZS5rZXlkb3duKX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiLGQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1hKHRoaXMpLGY9ZS5kYXRhKFwiYnMubW9kYWxcIiksZz1hLmV4dGVuZCh7fSxjLkRFRkFVTFRTLGUuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiBiJiZiKTtmfHxlLmRhdGEoXCJicy5tb2RhbFwiLGY9bmV3IGModGhpcyxnKSksXCJzdHJpbmdcIj09dHlwZW9mIGI/ZltiXShkKTpnLnNob3cmJmYuc2hvdyhkKX0pfXZhciBjPWZ1bmN0aW9uKGIsYyl7dGhpcy5vcHRpb25zPWMsdGhpcy4kYm9keT1hKGRvY3VtZW50LmJvZHkpLHRoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLiRkaWFsb2c9dGhpcy4kZWxlbWVudC5maW5kKFwiLm1vZGFsLWRpYWxvZ1wiKSx0aGlzLiRiYWNrZHJvcD1udWxsLHRoaXMuaXNTaG93bj1udWxsLHRoaXMub3JpZ2luYWxCb2R5UGFkPW51bGwsdGhpcy5zY3JvbGxiYXJXaWR0aD0wLHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaz0hMSx0aGlzLm9wdGlvbnMucmVtb3RlJiZ0aGlzLiRlbGVtZW50LmZpbmQoXCIubW9kYWwtY29udGVudFwiKS5sb2FkKHRoaXMub3B0aW9ucy5yZW1vdGUsYS5wcm94eShmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQudHJpZ2dlcihcImxvYWRlZC5icy5tb2RhbFwiKX0sdGhpcykpfTtjLlZFUlNJT049XCIzLjMuNVwiLGMuVFJBTlNJVElPTl9EVVJBVElPTj0zMDAsYy5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OPTE1MCxjLkRFRkFVTFRTPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxzaG93OiEwfSxjLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3coYSl9LGMucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpcyxlPWEuRXZlbnQoXCJzaG93LmJzLm1vZGFsXCIse3JlbGF0ZWRUYXJnZXQ6Yn0pO3RoaXMuJGVsZW1lbnQudHJpZ2dlcihlKSx0aGlzLmlzU2hvd258fGUuaXNEZWZhdWx0UHJldmVudGVkKCl8fCh0aGlzLmlzU2hvd249ITAsdGhpcy5jaGVja1Njcm9sbGJhcigpLHRoaXMuc2V0U2Nyb2xsYmFyKCksdGhpcy4kYm9keS5hZGRDbGFzcyhcIm1vZGFsLW9wZW5cIiksdGhpcy5lc2NhcGUoKSx0aGlzLnJlc2l6ZSgpLHRoaXMuJGVsZW1lbnQub24oXCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIsJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsYS5wcm94eSh0aGlzLmhpZGUsdGhpcykpLHRoaXMuJGRpYWxvZy5vbihcIm1vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIsZnVuY3Rpb24oKXtkLiRlbGVtZW50Lm9uZShcIm1vdXNldXAuZGlzbWlzcy5icy5tb2RhbFwiLGZ1bmN0aW9uKGIpe2EoYi50YXJnZXQpLmlzKGQuJGVsZW1lbnQpJiYoZC5pZ25vcmVCYWNrZHJvcENsaWNrPSEwKX0pfSksdGhpcy5iYWNrZHJvcChmdW5jdGlvbigpe3ZhciBlPWEuc3VwcG9ydC50cmFuc2l0aW9uJiZkLiRlbGVtZW50Lmhhc0NsYXNzKFwiZmFkZVwiKTtkLiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aHx8ZC4kZWxlbWVudC5hcHBlbmRUbyhkLiRib2R5KSxkLiRlbGVtZW50LnNob3coKS5zY3JvbGxUb3AoMCksZC5hZGp1c3REaWFsb2coKSxlJiZkLiRlbGVtZW50WzBdLm9mZnNldFdpZHRoLGQuJGVsZW1lbnQuYWRkQ2xhc3MoXCJpblwiKSxkLmVuZm9yY2VGb2N1cygpO3ZhciBmPWEuRXZlbnQoXCJzaG93bi5icy5tb2RhbFwiLHtyZWxhdGVkVGFyZ2V0OmJ9KTtlP2QuJGRpYWxvZy5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixmdW5jdGlvbigpe2QuJGVsZW1lbnQudHJpZ2dlcihcImZvY3VzXCIpLnRyaWdnZXIoZil9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLlRSQU5TSVRJT05fRFVSQVRJT04pOmQuJGVsZW1lbnQudHJpZ2dlcihcImZvY3VzXCIpLnRyaWdnZXIoZil9KSl9LGMucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oYil7YiYmYi5wcmV2ZW50RGVmYXVsdCgpLGI9YS5FdmVudChcImhpZGUuYnMubW9kYWxcIiksdGhpcy4kZWxlbWVudC50cmlnZ2VyKGIpLHRoaXMuaXNTaG93biYmIWIuaXNEZWZhdWx0UHJldmVudGVkKCkmJih0aGlzLmlzU2hvd249ITEsdGhpcy5lc2NhcGUoKSx0aGlzLnJlc2l6ZSgpLGEoZG9jdW1lbnQpLm9mZihcImZvY3VzaW4uYnMubW9kYWxcIiksdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhcImluXCIpLm9mZihcImNsaWNrLmRpc21pc3MuYnMubW9kYWxcIikub2ZmKFwibW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsXCIpLHRoaXMuJGRpYWxvZy5vZmYoXCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiKSxhLnN1cHBvcnQudHJhbnNpdGlvbiYmdGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImZhZGVcIik/dGhpcy4kZWxlbWVudC5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixhLnByb3h5KHRoaXMuaGlkZU1vZGFsLHRoaXMpKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLlRSQU5TSVRJT05fRFVSQVRJT04pOnRoaXMuaGlkZU1vZGFsKCkpfSxjLnByb3RvdHlwZS5lbmZvcmNlRm9jdXM9ZnVuY3Rpb24oKXthKGRvY3VtZW50KS5vZmYoXCJmb2N1c2luLmJzLm1vZGFsXCIpLm9uKFwiZm9jdXNpbi5icy5tb2RhbFwiLGEucHJveHkoZnVuY3Rpb24oYSl7dGhpcy4kZWxlbWVudFswXT09PWEudGFyZ2V0fHx0aGlzLiRlbGVtZW50LmhhcyhhLnRhcmdldCkubGVuZ3RofHx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKX0sdGhpcykpfSxjLnByb3RvdHlwZS5lc2NhcGU9ZnVuY3Rpb24oKXt0aGlzLmlzU2hvd24mJnRoaXMub3B0aW9ucy5rZXlib2FyZD90aGlzLiRlbGVtZW50Lm9uKFwia2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIsYS5wcm94eShmdW5jdGlvbihhKXsyNz09YS53aGljaCYmdGhpcy5oaWRlKCl9LHRoaXMpKTp0aGlzLmlzU2hvd258fHRoaXMuJGVsZW1lbnQub2ZmKFwia2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIpfSxjLnByb3RvdHlwZS5yZXNpemU9ZnVuY3Rpb24oKXt0aGlzLmlzU2hvd24/YSh3aW5kb3cpLm9uKFwicmVzaXplLmJzLm1vZGFsXCIsYS5wcm94eSh0aGlzLmhhbmRsZVVwZGF0ZSx0aGlzKSk6YSh3aW5kb3cpLm9mZihcInJlc2l6ZS5icy5tb2RhbFwiKX0sYy5wcm90b3R5cGUuaGlkZU1vZGFsPWZ1bmN0aW9uKCl7dmFyIGE9dGhpczt0aGlzLiRlbGVtZW50LmhpZGUoKSx0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uKCl7YS4kYm9keS5yZW1vdmVDbGFzcyhcIm1vZGFsLW9wZW5cIiksYS5yZXNldEFkanVzdG1lbnRzKCksYS5yZXNldFNjcm9sbGJhcigpLGEuJGVsZW1lbnQudHJpZ2dlcihcImhpZGRlbi5icy5tb2RhbFwiKX0pfSxjLnByb3RvdHlwZS5yZW1vdmVCYWNrZHJvcD1mdW5jdGlvbigpe3RoaXMuJGJhY2tkcm9wJiZ0aGlzLiRiYWNrZHJvcC5yZW1vdmUoKSx0aGlzLiRiYWNrZHJvcD1udWxsfSxjLnByb3RvdHlwZS5iYWNrZHJvcD1mdW5jdGlvbihiKXt2YXIgZD10aGlzLGU9dGhpcy4kZWxlbWVudC5oYXNDbGFzcyhcImZhZGVcIik/XCJmYWRlXCI6XCJcIjtpZih0aGlzLmlzU2hvd24mJnRoaXMub3B0aW9ucy5iYWNrZHJvcCl7dmFyIGY9YS5zdXBwb3J0LnRyYW5zaXRpb24mJmU7aWYodGhpcy4kYmFja2Ryb3A9YShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKS5hZGRDbGFzcyhcIm1vZGFsLWJhY2tkcm9wIFwiK2UpLmFwcGVuZFRvKHRoaXMuJGJvZHkpLHRoaXMuJGVsZW1lbnQub24oXCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIsYS5wcm94eShmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrP3ZvaWQodGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrPSExKTp2b2lkKGEudGFyZ2V0PT09YS5jdXJyZW50VGFyZ2V0JiYoXCJzdGF0aWNcIj09dGhpcy5vcHRpb25zLmJhY2tkcm9wP3RoaXMuJGVsZW1lbnRbMF0uZm9jdXMoKTp0aGlzLmhpZGUoKSkpfSx0aGlzKSksZiYmdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGgsdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoXCJpblwiKSwhYilyZXR1cm47Zj90aGlzLiRiYWNrZHJvcC5vbmUoXCJic1RyYW5zaXRpb25FbmRcIixiKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChjLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pOmIoKX1lbHNlIGlmKCF0aGlzLmlzU2hvd24mJnRoaXMuJGJhY2tkcm9wKXt0aGlzLiRiYWNrZHJvcC5yZW1vdmVDbGFzcyhcImluXCIpO3ZhciBnPWZ1bmN0aW9uKCl7ZC5yZW1vdmVCYWNrZHJvcCgpLGImJmIoKX07YS5zdXBwb3J0LnRyYW5zaXRpb24mJnRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoXCJmYWRlXCIpP3RoaXMuJGJhY2tkcm9wLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGcpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGMuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTik6ZygpfWVsc2UgYiYmYigpfSxjLnByb3RvdHlwZS5oYW5kbGVVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLmFkanVzdERpYWxvZygpfSxjLnByb3RvdHlwZS5hZGp1c3REaWFsb2c9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodD5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O3RoaXMuJGVsZW1lbnQuY3NzKHtwYWRkaW5nTGVmdDohdGhpcy5ib2R5SXNPdmVyZmxvd2luZyYmYT90aGlzLnNjcm9sbGJhcldpZHRoOlwiXCIscGFkZGluZ1JpZ2h0OnRoaXMuYm9keUlzT3ZlcmZsb3dpbmcmJiFhP3RoaXMuc2Nyb2xsYmFyV2lkdGg6XCJcIn0pfSxjLnByb3RvdHlwZS5yZXNldEFkanVzdG1lbnRzPWZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5jc3Moe3BhZGRpbmdMZWZ0OlwiXCIscGFkZGluZ1JpZ2h0OlwiXCJ9KX0sYy5wcm90b3R5cGUuY2hlY2tTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgYT13aW5kb3cuaW5uZXJXaWR0aDtpZighYSl7dmFyIGI9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO2E9Yi5yaWdodC1NYXRoLmFicyhiLmxlZnQpfXRoaXMuYm9keUlzT3ZlcmZsb3dpbmc9ZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aDxhLHRoaXMuc2Nyb2xsYmFyV2lkdGg9dGhpcy5tZWFzdXJlU2Nyb2xsYmFyKCl9LGMucHJvdG90eXBlLnNldFNjcm9sbGJhcj1mdW5jdGlvbigpe3ZhciBhPXBhcnNlSW50KHRoaXMuJGJvZHkuY3NzKFwicGFkZGluZy1yaWdodFwiKXx8MCwxMCk7dGhpcy5vcmlnaW5hbEJvZHlQYWQ9ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHR8fFwiXCIsdGhpcy5ib2R5SXNPdmVyZmxvd2luZyYmdGhpcy4kYm9keS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIsYSt0aGlzLnNjcm9sbGJhcldpZHRoKX0sYy5wcm90b3R5cGUucmVzZXRTY3JvbGxiYXI9ZnVuY3Rpb24oKXt0aGlzLiRib2R5LmNzcyhcInBhZGRpbmctcmlnaHRcIix0aGlzLm9yaWdpbmFsQm9keVBhZCl9LGMucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXI9ZnVuY3Rpb24oKXt2YXIgYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO2EuY2xhc3NOYW1lPVwibW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmVcIix0aGlzLiRib2R5LmFwcGVuZChhKTt2YXIgYj1hLm9mZnNldFdpZHRoLWEuY2xpZW50V2lkdGg7cmV0dXJuIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoYSksYn07dmFyIGQ9YS5mbi5tb2RhbDthLmZuLm1vZGFsPWIsYS5mbi5tb2RhbC5Db25zdHJ1Y3Rvcj1jLGEuZm4ubW9kYWwubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLmZuLm1vZGFsPWQsdGhpc30sYShkb2N1bWVudCkub24oXCJjbGljay5icy5tb2RhbC5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsZnVuY3Rpb24oYyl7dmFyIGQ9YSh0aGlzKSxlPWQuYXR0cihcImhyZWZcIiksZj1hKGQuYXR0cihcImRhdGEtdGFyZ2V0XCIpfHxlJiZlLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sXCJcIikpLGc9Zi5kYXRhKFwiYnMubW9kYWxcIik/XCJ0b2dnbGVcIjphLmV4dGVuZCh7cmVtb3RlOiEvIy8udGVzdChlKSYmZX0sZi5kYXRhKCksZC5kYXRhKCkpO2QuaXMoXCJhXCIpJiZjLnByZXZlbnREZWZhdWx0KCksZi5vbmUoXCJzaG93LmJzLm1vZGFsXCIsZnVuY3Rpb24oYSl7YS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Zi5vbmUoXCJoaWRkZW4uYnMubW9kYWxcIixmdW5jdGlvbigpe2QuaXMoXCI6dmlzaWJsZVwiKSYmZC50cmlnZ2VyKFwiZm9jdXNcIil9KX0pLGIuY2FsbChmLGcsdGhpcyl9KX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihiKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxlPWQuZGF0YShcImJzLnRvb2x0aXBcIiksZj1cIm9iamVjdFwiPT10eXBlb2YgYiYmYjsoZXx8IS9kZXN0cm95fGhpZGUvLnRlc3QoYikpJiYoZXx8ZC5kYXRhKFwiYnMudG9vbHRpcFwiLGU9bmV3IGModGhpcyxmKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJmVbYl0oKSl9KX12YXIgYz1mdW5jdGlvbihhLGIpe3RoaXMudHlwZT1udWxsLHRoaXMub3B0aW9ucz1udWxsLHRoaXMuZW5hYmxlZD1udWxsLHRoaXMudGltZW91dD1udWxsLHRoaXMuaG92ZXJTdGF0ZT1udWxsLHRoaXMuJGVsZW1lbnQ9bnVsbCx0aGlzLmluU3RhdGU9bnVsbCx0aGlzLmluaXQoXCJ0b29sdGlwXCIsYSxiKX07Yy5WRVJTSU9OPVwiMy4zLjVcIixjLlRSQU5TSVRJT05fRFVSQVRJT049MTUwLGMuREVGQVVMVFM9e2FuaW1hdGlvbjohMCxwbGFjZW1lbnQ6XCJ0b3BcIixzZWxlY3RvcjohMSx0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93XCI+PC9kaXY+PGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLHRyaWdnZXI6XCJob3ZlciBmb2N1c1wiLHRpdGxlOlwiXCIsZGVsYXk6MCxodG1sOiExLGNvbnRhaW5lcjohMSx2aWV3cG9ydDp7c2VsZWN0b3I6XCJib2R5XCIscGFkZGluZzowfX0sYy5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbihiLGMsZCl7aWYodGhpcy5lbmFibGVkPSEwLHRoaXMudHlwZT1iLHRoaXMuJGVsZW1lbnQ9YShjKSx0aGlzLm9wdGlvbnM9dGhpcy5nZXRPcHRpb25zKGQpLHRoaXMuJHZpZXdwb3J0PXRoaXMub3B0aW9ucy52aWV3cG9ydCYmYShhLmlzRnVuY3Rpb24odGhpcy5vcHRpb25zLnZpZXdwb3J0KT90aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLHRoaXMuJGVsZW1lbnQpOnRoaXMub3B0aW9ucy52aWV3cG9ydC5zZWxlY3Rvcnx8dGhpcy5vcHRpb25zLnZpZXdwb3J0KSx0aGlzLmluU3RhdGU9e2NsaWNrOiExLGhvdmVyOiExLGZvY3VzOiExfSx0aGlzLiRlbGVtZW50WzBdaW5zdGFuY2VvZiBkb2N1bWVudC5jb25zdHJ1Y3RvciYmIXRoaXMub3B0aW9ucy5zZWxlY3Rvcil0aHJvdyBuZXcgRXJyb3IoXCJgc2VsZWN0b3JgIG9wdGlvbiBtdXN0IGJlIHNwZWNpZmllZCB3aGVuIGluaXRpYWxpemluZyBcIit0aGlzLnR5cGUrXCIgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhXCIpO2Zvcih2YXIgZT10aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdChcIiBcIiksZj1lLmxlbmd0aDtmLS07KXt2YXIgZz1lW2ZdO2lmKFwiY2xpY2tcIj09Zyl0aGlzLiRlbGVtZW50Lm9uKFwiY2xpY2suXCIrdGhpcy50eXBlLHRoaXMub3B0aW9ucy5zZWxlY3RvcixhLnByb3h5KHRoaXMudG9nZ2xlLHRoaXMpKTtlbHNlIGlmKFwibWFudWFsXCIhPWcpe3ZhciBoPVwiaG92ZXJcIj09Zz9cIm1vdXNlZW50ZXJcIjpcImZvY3VzaW5cIixpPVwiaG92ZXJcIj09Zz9cIm1vdXNlbGVhdmVcIjpcImZvY3Vzb3V0XCI7dGhpcy4kZWxlbWVudC5vbihoK1wiLlwiK3RoaXMudHlwZSx0aGlzLm9wdGlvbnMuc2VsZWN0b3IsYS5wcm94eSh0aGlzLmVudGVyLHRoaXMpKSx0aGlzLiRlbGVtZW50Lm9uKGkrXCIuXCIrdGhpcy50eXBlLHRoaXMub3B0aW9ucy5zZWxlY3RvcixhLnByb3h5KHRoaXMubGVhdmUsdGhpcykpfX10aGlzLm9wdGlvbnMuc2VsZWN0b3I/dGhpcy5fb3B0aW9ucz1hLmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMse3RyaWdnZXI6XCJtYW51YWxcIixzZWxlY3RvcjpcIlwifSk6dGhpcy5maXhUaXRsZSgpfSxjLnByb3RvdHlwZS5nZXREZWZhdWx0cz1mdW5jdGlvbigpe3JldHVybiBjLkRFRkFVTFRTfSxjLnByb3RvdHlwZS5nZXRPcHRpb25zPWZ1bmN0aW9uKGIpe3JldHVybiBiPWEuZXh0ZW5kKHt9LHRoaXMuZ2V0RGVmYXVsdHMoKSx0aGlzLiRlbGVtZW50LmRhdGEoKSxiKSxiLmRlbGF5JiZcIm51bWJlclwiPT10eXBlb2YgYi5kZWxheSYmKGIuZGVsYXk9e3Nob3c6Yi5kZWxheSxoaWRlOmIuZGVsYXl9KSxifSxjLnByb3RvdHlwZS5nZXREZWxlZ2F0ZU9wdGlvbnM9ZnVuY3Rpb24oKXt2YXIgYj17fSxjPXRoaXMuZ2V0RGVmYXVsdHMoKTtyZXR1cm4gdGhpcy5fb3B0aW9ucyYmYS5lYWNoKHRoaXMuX29wdGlvbnMsZnVuY3Rpb24oYSxkKXtjW2FdIT1kJiYoYlthXT1kKX0pLGJ9LGMucHJvdG90eXBlLmVudGVyPWZ1bmN0aW9uKGIpe3ZhciBjPWIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yP2I6YShiLmN1cnJlbnRUYXJnZXQpLmRhdGEoXCJicy5cIit0aGlzLnR5cGUpO3JldHVybiBjfHwoYz1uZXcgdGhpcy5jb25zdHJ1Y3RvcihiLmN1cnJlbnRUYXJnZXQsdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSksYShiLmN1cnJlbnRUYXJnZXQpLmRhdGEoXCJicy5cIit0aGlzLnR5cGUsYykpLGIgaW5zdGFuY2VvZiBhLkV2ZW50JiYoYy5pblN0YXRlW1wiZm9jdXNpblwiPT1iLnR5cGU/XCJmb2N1c1wiOlwiaG92ZXJcIl09ITApLGMudGlwKCkuaGFzQ2xhc3MoXCJpblwiKXx8XCJpblwiPT1jLmhvdmVyU3RhdGU/dm9pZChjLmhvdmVyU3RhdGU9XCJpblwiKTooY2xlYXJUaW1lb3V0KGMudGltZW91dCksYy5ob3ZlclN0YXRlPVwiaW5cIixjLm9wdGlvbnMuZGVsYXkmJmMub3B0aW9ucy5kZWxheS5zaG93P3ZvaWQoYy50aW1lb3V0PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcImluXCI9PWMuaG92ZXJTdGF0ZSYmYy5zaG93KCl9LGMub3B0aW9ucy5kZWxheS5zaG93KSk6Yy5zaG93KCkpfSxjLnByb3RvdHlwZS5pc0luU3RhdGVUcnVlPWZ1bmN0aW9uKCl7Zm9yKHZhciBhIGluIHRoaXMuaW5TdGF0ZSlpZih0aGlzLmluU3RhdGVbYV0pcmV0dXJuITA7cmV0dXJuITF9LGMucHJvdG90eXBlLmxlYXZlPWZ1bmN0aW9uKGIpe3ZhciBjPWIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yP2I6YShiLmN1cnJlbnRUYXJnZXQpLmRhdGEoXCJicy5cIit0aGlzLnR5cGUpO3JldHVybiBjfHwoYz1uZXcgdGhpcy5jb25zdHJ1Y3RvcihiLmN1cnJlbnRUYXJnZXQsdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSksYShiLmN1cnJlbnRUYXJnZXQpLmRhdGEoXCJicy5cIit0aGlzLnR5cGUsYykpLGIgaW5zdGFuY2VvZiBhLkV2ZW50JiYoYy5pblN0YXRlW1wiZm9jdXNvdXRcIj09Yi50eXBlP1wiZm9jdXNcIjpcImhvdmVyXCJdPSExKSxjLmlzSW5TdGF0ZVRydWUoKT92b2lkIDA6KGNsZWFyVGltZW91dChjLnRpbWVvdXQpLGMuaG92ZXJTdGF0ZT1cIm91dFwiLGMub3B0aW9ucy5kZWxheSYmYy5vcHRpb25zLmRlbGF5LmhpZGU/dm9pZChjLnRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe1wib3V0XCI9PWMuaG92ZXJTdGF0ZSYmYy5oaWRlKCl9LGMub3B0aW9ucy5kZWxheS5oaWRlKSk6Yy5oaWRlKCkpfSxjLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGI9YS5FdmVudChcInNob3cuYnMuXCIrdGhpcy50eXBlKTtpZih0aGlzLmhhc0NvbnRlbnQoKSYmdGhpcy5lbmFibGVkKXt0aGlzLiRlbGVtZW50LnRyaWdnZXIoYik7dmFyIGQ9YS5jb250YWlucyh0aGlzLiRlbGVtZW50WzBdLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMuJGVsZW1lbnRbMF0pO2lmKGIuaXNEZWZhdWx0UHJldmVudGVkKCl8fCFkKXJldHVybjt2YXIgZT10aGlzLGY9dGhpcy50aXAoKSxnPXRoaXMuZ2V0VUlEKHRoaXMudHlwZSk7dGhpcy5zZXRDb250ZW50KCksZi5hdHRyKFwiaWRcIixnKSx0aGlzLiRlbGVtZW50LmF0dHIoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsZyksdGhpcy5vcHRpb25zLmFuaW1hdGlvbiYmZi5hZGRDbGFzcyhcImZhZGVcIik7dmFyIGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5vcHRpb25zLnBsYWNlbWVudD90aGlzLm9wdGlvbnMucGxhY2VtZW50LmNhbGwodGhpcyxmWzBdLHRoaXMuJGVsZW1lbnRbMF0pOnRoaXMub3B0aW9ucy5wbGFjZW1lbnQsaT0vXFxzP2F1dG8/XFxzPy9pLGo9aS50ZXN0KGgpO2omJihoPWgucmVwbGFjZShpLFwiXCIpfHxcInRvcFwiKSxmLmRldGFjaCgpLmNzcyh7dG9wOjAsbGVmdDowLGRpc3BsYXk6XCJibG9ja1wifSkuYWRkQ2xhc3MoaCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSx0aGlzKSx0aGlzLm9wdGlvbnMuY29udGFpbmVyP2YuYXBwZW5kVG8odGhpcy5vcHRpb25zLmNvbnRhaW5lcik6Zi5pbnNlcnRBZnRlcih0aGlzLiRlbGVtZW50KSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJpbnNlcnRlZC5icy5cIit0aGlzLnR5cGUpO3ZhciBrPXRoaXMuZ2V0UG9zaXRpb24oKSxsPWZbMF0ub2Zmc2V0V2lkdGgsbT1mWzBdLm9mZnNldEhlaWdodDtpZihqKXt2YXIgbj1oLG89dGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydCk7aD1cImJvdHRvbVwiPT1oJiZrLmJvdHRvbSttPm8uYm90dG9tP1widG9wXCI6XCJ0b3BcIj09aCYmay50b3AtbTxvLnRvcD9cImJvdHRvbVwiOlwicmlnaHRcIj09aCYmay5yaWdodCtsPm8ud2lkdGg/XCJsZWZ0XCI6XCJsZWZ0XCI9PWgmJmsubGVmdC1sPG8ubGVmdD9cInJpZ2h0XCI6aCxmLnJlbW92ZUNsYXNzKG4pLmFkZENsYXNzKGgpfXZhciBwPXRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChoLGssbCxtKTt0aGlzLmFwcGx5UGxhY2VtZW50KHAsaCk7dmFyIHE9ZnVuY3Rpb24oKXt2YXIgYT1lLmhvdmVyU3RhdGU7ZS4kZWxlbWVudC50cmlnZ2VyKFwic2hvd24uYnMuXCIrZS50eXBlKSxlLmhvdmVyU3RhdGU9bnVsbCxcIm91dFwiPT1hJiZlLmxlYXZlKGUpfTthLnN1cHBvcnQudHJhbnNpdGlvbiYmdGhpcy4kdGlwLmhhc0NsYXNzKFwiZmFkZVwiKT9mLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLHEpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGMuVFJBTlNJVElPTl9EVVJBVElPTik6cSgpfX0sYy5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQ9ZnVuY3Rpb24oYixjKXt2YXIgZD10aGlzLnRpcCgpLGU9ZFswXS5vZmZzZXRXaWR0aCxmPWRbMF0ub2Zmc2V0SGVpZ2h0LGc9cGFyc2VJbnQoZC5jc3MoXCJtYXJnaW4tdG9wXCIpLDEwKSxoPXBhcnNlSW50KGQuY3NzKFwibWFyZ2luLWxlZnRcIiksMTApO2lzTmFOKGcpJiYoZz0wKSxpc05hTihoKSYmKGg9MCksYi50b3ArPWcsYi5sZWZ0Kz1oLGEub2Zmc2V0LnNldE9mZnNldChkWzBdLGEuZXh0ZW5kKHt1c2luZzpmdW5jdGlvbihhKXtkLmNzcyh7dG9wOk1hdGgucm91bmQoYS50b3ApLGxlZnQ6TWF0aC5yb3VuZChhLmxlZnQpfSl9fSxiKSwwKSxkLmFkZENsYXNzKFwiaW5cIik7dmFyIGk9ZFswXS5vZmZzZXRXaWR0aCxqPWRbMF0ub2Zmc2V0SGVpZ2h0O1widG9wXCI9PWMmJmohPWYmJihiLnRvcD1iLnRvcCtmLWopO3ZhciBrPXRoaXMuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhKGMsYixpLGopO2subGVmdD9iLmxlZnQrPWsubGVmdDpiLnRvcCs9ay50b3A7dmFyIGw9L3RvcHxib3R0b20vLnRlc3QoYyksbT1sPzIqay5sZWZ0LWUraToyKmsudG9wLWYraixuPWw/XCJvZmZzZXRXaWR0aFwiOlwib2Zmc2V0SGVpZ2h0XCI7ZC5vZmZzZXQoYiksdGhpcy5yZXBsYWNlQXJyb3cobSxkWzBdW25dLGwpfSxjLnByb3RvdHlwZS5yZXBsYWNlQXJyb3c9ZnVuY3Rpb24oYSxiLGMpe3RoaXMuYXJyb3coKS5jc3MoYz9cImxlZnRcIjpcInRvcFwiLDUwKigxLWEvYikrXCIlXCIpLmNzcyhjP1widG9wXCI6XCJsZWZ0XCIsXCJcIil9LGMucHJvdG90eXBlLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnRpcCgpLGI9dGhpcy5nZXRUaXRsZSgpO2EuZmluZChcIi50b29sdGlwLWlubmVyXCIpW3RoaXMub3B0aW9ucy5odG1sP1wiaHRtbFwiOlwidGV4dFwiXShiKSxhLnJlbW92ZUNsYXNzKFwiZmFkZSBpbiB0b3AgYm90dG9tIGxlZnQgcmlnaHRcIil9LGMucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oYil7ZnVuY3Rpb24gZCgpe1wiaW5cIiE9ZS5ob3ZlclN0YXRlJiZmLmRldGFjaCgpLGUuJGVsZW1lbnQucmVtb3ZlQXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIikudHJpZ2dlcihcImhpZGRlbi5icy5cIitlLnR5cGUpLGImJmIoKX12YXIgZT10aGlzLGY9YSh0aGlzLiR0aXApLGc9YS5FdmVudChcImhpZGUuYnMuXCIrdGhpcy50eXBlKTtyZXR1cm4gdGhpcy4kZWxlbWVudC50cmlnZ2VyKGcpLGcuaXNEZWZhdWx0UHJldmVudGVkKCk/dm9pZCAwOihmLnJlbW92ZUNsYXNzKFwiaW5cIiksYS5zdXBwb3J0LnRyYW5zaXRpb24mJmYuaGFzQ2xhc3MoXCJmYWRlXCIpP2Yub25lKFwiYnNUcmFuc2l0aW9uRW5kXCIsZCkuZW11bGF0ZVRyYW5zaXRpb25FbmQoYy5UUkFOU0lUSU9OX0RVUkFUSU9OKTpkKCksdGhpcy5ob3ZlclN0YXRlPW51bGwsdGhpcyl9LGMucHJvdG90eXBlLmZpeFRpdGxlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy4kZWxlbWVudDsoYS5hdHRyKFwidGl0bGVcIil8fFwic3RyaW5nXCIhPXR5cGVvZiBhLmF0dHIoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpKSYmYS5hdHRyKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiLGEuYXR0cihcInRpdGxlXCIpfHxcIlwiKS5hdHRyKFwidGl0bGVcIixcIlwiKX0sYy5wcm90b3R5cGUuaGFzQ29udGVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFRpdGxlKCl9LGMucHJvdG90eXBlLmdldFBvc2l0aW9uPWZ1bmN0aW9uKGIpe2I9Ynx8dGhpcy4kZWxlbWVudDt2YXIgYz1iWzBdLGQ9XCJCT0RZXCI9PWMudGFnTmFtZSxlPWMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7bnVsbD09ZS53aWR0aCYmKGU9YS5leHRlbmQoe30sZSx7d2lkdGg6ZS5yaWdodC1lLmxlZnQsaGVpZ2h0OmUuYm90dG9tLWUudG9wfSkpO3ZhciBmPWQ/e3RvcDowLGxlZnQ6MH06Yi5vZmZzZXQoKSxnPXtzY3JvbGw6ZD9kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wfHxkb2N1bWVudC5ib2R5LnNjcm9sbFRvcDpiLnNjcm9sbFRvcCgpfSxoPWQ/e3dpZHRoOmEod2luZG93KS53aWR0aCgpLGhlaWdodDphKHdpbmRvdykuaGVpZ2h0KCl9Om51bGw7cmV0dXJuIGEuZXh0ZW5kKHt9LGUsZyxoLGYpfSxjLnByb3RvdHlwZS5nZXRDYWxjdWxhdGVkT2Zmc2V0PWZ1bmN0aW9uKGEsYixjLGQpe3JldHVyblwiYm90dG9tXCI9PWE/e3RvcDpiLnRvcCtiLmhlaWdodCxsZWZ0OmIubGVmdCtiLndpZHRoLzItYy8yfTpcInRvcFwiPT1hP3t0b3A6Yi50b3AtZCxsZWZ0OmIubGVmdCtiLndpZHRoLzItYy8yfTpcImxlZnRcIj09YT97dG9wOmIudG9wK2IuaGVpZ2h0LzItZC8yLGxlZnQ6Yi5sZWZ0LWN9Ont0b3A6Yi50b3ArYi5oZWlnaHQvMi1kLzIsbGVmdDpiLmxlZnQrYi53aWR0aH19LGMucHJvdG90eXBlLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT17dG9wOjAsbGVmdDowfTtpZighdGhpcy4kdmlld3BvcnQpcmV0dXJuIGU7dmFyIGY9dGhpcy5vcHRpb25zLnZpZXdwb3J0JiZ0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZ3x8MCxnPXRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpO2lmKC9yaWdodHxsZWZ0Ly50ZXN0KGEpKXt2YXIgaD1iLnRvcC1mLWcuc2Nyb2xsLGk9Yi50b3ArZi1nLnNjcm9sbCtkO2g8Zy50b3A/ZS50b3A9Zy50b3AtaDppPmcudG9wK2cuaGVpZ2h0JiYoZS50b3A9Zy50b3ArZy5oZWlnaHQtaSl9ZWxzZXt2YXIgaj1iLmxlZnQtZixrPWIubGVmdCtmK2M7ajxnLmxlZnQ/ZS5sZWZ0PWcubGVmdC1qOms+Zy5yaWdodCYmKGUubGVmdD1nLmxlZnQrZy53aWR0aC1rKX1yZXR1cm4gZX0sYy5wcm90b3R5cGUuZ2V0VGl0bGU9ZnVuY3Rpb24oKXt2YXIgYSxiPXRoaXMuJGVsZW1lbnQsYz10aGlzLm9wdGlvbnM7cmV0dXJuIGE9Yi5hdHRyKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIGMudGl0bGU/Yy50aXRsZS5jYWxsKGJbMF0pOmMudGl0bGUpfSxjLnByb3RvdHlwZS5nZXRVSUQ9ZnVuY3Rpb24oYSl7ZG8gYSs9fn4oMWU2Kk1hdGgucmFuZG9tKCkpO3doaWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGEpKTtyZXR1cm4gYX0sYy5wcm90b3R5cGUudGlwPWZ1bmN0aW9uKCl7aWYoIXRoaXMuJHRpcCYmKHRoaXMuJHRpcD1hKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSksMSE9dGhpcy4kdGlwLmxlbmd0aCkpdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZStcIiBgdGVtcGxhdGVgIG9wdGlvbiBtdXN0IGNvbnNpc3Qgb2YgZXhhY3RseSAxIHRvcC1sZXZlbCBlbGVtZW50IVwiKTtyZXR1cm4gdGhpcy4kdGlwfSxjLnByb3RvdHlwZS5hcnJvdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRhcnJvdz10aGlzLiRhcnJvd3x8dGhpcy50aXAoKS5maW5kKFwiLnRvb2x0aXAtYXJyb3dcIil9LGMucHJvdG90eXBlLmVuYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hMH0sYy5wcm90b3R5cGUuZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hMX0sYy5wcm90b3R5cGUudG9nZ2xlRW5hYmxlZD1mdW5jdGlvbigpe3RoaXMuZW5hYmxlZD0hdGhpcy5lbmFibGVkfSxjLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcztiJiYoYz1hKGIuY3VycmVudFRhcmdldCkuZGF0YShcImJzLlwiK3RoaXMudHlwZSksY3x8KGM9bmV3IHRoaXMuY29uc3RydWN0b3IoYi5jdXJyZW50VGFyZ2V0LHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpLGEoYi5jdXJyZW50VGFyZ2V0KS5kYXRhKFwiYnMuXCIrdGhpcy50eXBlLGMpKSksYj8oYy5pblN0YXRlLmNsaWNrPSFjLmluU3RhdGUuY2xpY2ssYy5pc0luU3RhdGVUcnVlKCk/Yy5lbnRlcihjKTpjLmxlYXZlKGMpKTpjLnRpcCgpLmhhc0NsYXNzKFwiaW5cIik/Yy5sZWF2ZShjKTpjLmVudGVyKGMpfSxjLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcztjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLmhpZGUoZnVuY3Rpb24oKXthLiRlbGVtZW50Lm9mZihcIi5cIithLnR5cGUpLnJlbW92ZURhdGEoXCJicy5cIithLnR5cGUpLGEuJHRpcCYmYS4kdGlwLmRldGFjaCgpLGEuJHRpcD1udWxsLGEuJGFycm93PW51bGwsYS4kdmlld3BvcnQ9bnVsbH0pfTt2YXIgZD1hLmZuLnRvb2x0aXA7YS5mbi50b29sdGlwPWIsYS5mbi50b29sdGlwLkNvbnN0cnVjdG9yPWMsYS5mbi50b29sdGlwLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi50b29sdGlwPWQsdGhpc319KGpRdWVyeSksK2Z1bmN0aW9uKGEpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGIoYil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZT1kLmRhdGEoXCJicy5wb3BvdmVyXCIpLGY9XCJvYmplY3RcIj09dHlwZW9mIGImJmI7KGV8fCEvZGVzdHJveXxoaWRlLy50ZXN0KGIpKSYmKGV8fGQuZGF0YShcImJzLnBvcG92ZXJcIixlPW5ldyBjKHRoaXMsZikpLFwic3RyaW5nXCI9PXR5cGVvZiBiJiZlW2JdKCkpfSl9dmFyIGM9ZnVuY3Rpb24oYSxiKXt0aGlzLmluaXQoXCJwb3BvdmVyXCIsYSxiKX07aWYoIWEuZm4udG9vbHRpcCl0aHJvdyBuZXcgRXJyb3IoXCJQb3BvdmVyIHJlcXVpcmVzIHRvb2x0aXAuanNcIik7Yy5WRVJTSU9OPVwiMy4zLjVcIixjLkRFRkFVTFRTPWEuZXh0ZW5kKHt9LGEuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5ERUZBVUxUUyx7cGxhY2VtZW50OlwicmlnaHRcIix0cmlnZ2VyOlwiY2xpY2tcIixjb250ZW50OlwiXCIsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLXRpdGxlXCI+PC9oMz48ZGl2IGNsYXNzPVwicG9wb3Zlci1jb250ZW50XCI+PC9kaXY+PC9kaXY+J30pLGMucHJvdG90eXBlPWEuZXh0ZW5kKHt9LGEuZm4udG9vbHRpcC5Db25zdHJ1Y3Rvci5wcm90b3R5cGUpLGMucHJvdG90eXBlLmNvbnN0cnVjdG9yPWMsYy5wcm90b3R5cGUuZ2V0RGVmYXVsdHM9ZnVuY3Rpb24oKXtyZXR1cm4gYy5ERUZBVUxUU30sYy5wcm90b3R5cGUuc2V0Q29udGVudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMudGlwKCksYj10aGlzLmdldFRpdGxlKCksYz10aGlzLmdldENvbnRlbnQoKTthLmZpbmQoXCIucG9wb3Zlci10aXRsZVwiKVt0aGlzLm9wdGlvbnMuaHRtbD9cImh0bWxcIjpcInRleHRcIl0oYiksYS5maW5kKFwiLnBvcG92ZXItY29udGVudFwiKS5jaGlsZHJlbigpLmRldGFjaCgpLmVuZCgpW3RoaXMub3B0aW9ucy5odG1sP1wic3RyaW5nXCI9PXR5cGVvZiBjP1wiaHRtbFwiOlwiYXBwZW5kXCI6XCJ0ZXh0XCJdKGMpLGEucmVtb3ZlQ2xhc3MoXCJmYWRlIHRvcCBib3R0b20gbGVmdCByaWdodCBpblwiKSxhLmZpbmQoXCIucG9wb3Zlci10aXRsZVwiKS5odG1sKCl8fGEuZmluZChcIi5wb3BvdmVyLXRpdGxlXCIpLmhpZGUoKX0sYy5wcm90b3R5cGUuaGFzQ29udGVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFRpdGxlKCl8fHRoaXMuZ2V0Q29udGVudCgpfSxjLnByb3RvdHlwZS5nZXRDb250ZW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy4kZWxlbWVudCxiPXRoaXMub3B0aW9ucztyZXR1cm4gYS5hdHRyKFwiZGF0YS1jb250ZW50XCIpfHwoXCJmdW5jdGlvblwiPT10eXBlb2YgYi5jb250ZW50P2IuY29udGVudC5jYWxsKGFbMF0pOmIuY29udGVudCl9LGMucHJvdG90eXBlLmFycm93PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJGFycm93PXRoaXMuJGFycm93fHx0aGlzLnRpcCgpLmZpbmQoXCIuYXJyb3dcIil9O3ZhciBkPWEuZm4ucG9wb3ZlcjthLmZuLnBvcG92ZXI9YixhLmZuLnBvcG92ZXIuQ29uc3RydWN0b3I9YyxhLmZuLnBvcG92ZXIubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLmZuLnBvcG92ZXI9ZCx0aGlzfX0oalF1ZXJ5KSwrZnVuY3Rpb24oYSl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gYihjLGQpe3RoaXMuJGJvZHk9YShkb2N1bWVudC5ib2R5KSx0aGlzLiRzY3JvbGxFbGVtZW50PWEoYShjKS5pcyhkb2N1bWVudC5ib2R5KT93aW5kb3c6YyksdGhpcy5vcHRpb25zPWEuZXh0ZW5kKHt9LGIuREVGQVVMVFMsZCksdGhpcy5zZWxlY3Rvcj0odGhpcy5vcHRpb25zLnRhcmdldHx8XCJcIikrXCIgLm5hdiBsaSA+IGFcIix0aGlzLm9mZnNldHM9W10sdGhpcy50YXJnZXRzPVtdLHRoaXMuYWN0aXZlVGFyZ2V0PW51bGwsdGhpcy5zY3JvbGxIZWlnaHQ9MCx0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKFwic2Nyb2xsLmJzLnNjcm9sbHNweVwiLGEucHJveHkodGhpcy5wcm9jZXNzLHRoaXMpKSx0aGlzLnJlZnJlc2goKSx0aGlzLnByb2Nlc3MoKX1mdW5jdGlvbiBjKGMpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGU9ZC5kYXRhKFwiYnMuc2Nyb2xsc3B5XCIpLGY9XCJvYmplY3RcIj09dHlwZW9mIGMmJmM7ZXx8ZC5kYXRhKFwiYnMuc2Nyb2xsc3B5XCIsZT1uZXcgYih0aGlzLGYpKSxcInN0cmluZ1wiPT10eXBlb2YgYyYmZVtjXSgpfSl9Yi5WRVJTSU9OPVwiMy4zLjVcIixiLkRFRkFVTFRTPXtvZmZzZXQ6MTB9LGIucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLiRzY3JvbGxFbGVtZW50WzBdLnNjcm9sbEhlaWdodHx8TWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCl9LGIucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLGM9XCJvZmZzZXRcIixkPTA7dGhpcy5vZmZzZXRzPVtdLHRoaXMudGFyZ2V0cz1bXSx0aGlzLnNjcm9sbEhlaWdodD10aGlzLmdldFNjcm9sbEhlaWdodCgpLGEuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSl8fChjPVwicG9zaXRpb25cIixkPXRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkpLHRoaXMuJGJvZHkuZmluZCh0aGlzLnNlbGVjdG9yKS5tYXAoZnVuY3Rpb24oKXt2YXIgYj1hKHRoaXMpLGU9Yi5kYXRhKFwidGFyZ2V0XCIpfHxiLmF0dHIoXCJocmVmXCIpLGY9L14jLi8udGVzdChlKSYmYShlKTtyZXR1cm4gZiYmZi5sZW5ndGgmJmYuaXMoXCI6dmlzaWJsZVwiKSYmW1tmW2NdKCkudG9wK2QsZV1dfHxudWxsfSkuc29ydChmdW5jdGlvbihhLGIpe3JldHVybiBhWzBdLWJbMF19KS5lYWNoKGZ1bmN0aW9uKCl7Yi5vZmZzZXRzLnB1c2godGhpc1swXSksYi50YXJnZXRzLnB1c2godGhpc1sxXSl9KX0sYi5wcm90b3R5cGUucHJvY2Vzcz1mdW5jdGlvbigpe3ZhciBhLGI9dGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKSt0aGlzLm9wdGlvbnMub2Zmc2V0LGM9dGhpcy5nZXRTY3JvbGxIZWlnaHQoKSxkPXRoaXMub3B0aW9ucy5vZmZzZXQrYy10aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpLGU9dGhpcy5vZmZzZXRzLGY9dGhpcy50YXJnZXRzLGc9dGhpcy5hY3RpdmVUYXJnZXQ7aWYodGhpcy5zY3JvbGxIZWlnaHQhPWMmJnRoaXMucmVmcmVzaCgpLGI+PWQpcmV0dXJuIGchPShhPWZbZi5sZW5ndGgtMV0pJiZ0aGlzLmFjdGl2YXRlKGEpO2lmKGcmJmI8ZVswXSlyZXR1cm4gdGhpcy5hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLmNsZWFyKCk7Zm9yKGE9ZS5sZW5ndGg7YS0tOylnIT1mW2FdJiZiPj1lW2FdJiYodm9pZCAwPT09ZVthKzFdfHxiPGVbYSsxXSkmJnRoaXMuYWN0aXZhdGUoZlthXSl9LGIucHJvdG90eXBlLmFjdGl2YXRlPWZ1bmN0aW9uKGIpe3RoaXMuYWN0aXZlVGFyZ2V0PWIsdGhpcy5jbGVhcigpO3ZhciBjPXRoaXMuc2VsZWN0b3IrJ1tkYXRhLXRhcmdldD1cIicrYisnXCJdLCcrdGhpcy5zZWxlY3RvcisnW2hyZWY9XCInK2IrJ1wiXScsZD1hKGMpLnBhcmVudHMoXCJsaVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtkLnBhcmVudChcIi5kcm9wZG93bi1tZW51XCIpLmxlbmd0aCYmKGQ9ZC5jbG9zZXN0KFwibGkuZHJvcGRvd25cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIikpLFxuZC50cmlnZ2VyKFwiYWN0aXZhdGUuYnMuc2Nyb2xsc3B5XCIpfSxiLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe2EodGhpcy5zZWxlY3RvcikucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsXCIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpfTt2YXIgZD1hLmZuLnNjcm9sbHNweTthLmZuLnNjcm9sbHNweT1jLGEuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yPWIsYS5mbi5zY3JvbGxzcHkubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBhLmZuLnNjcm9sbHNweT1kLHRoaXN9LGEod2luZG93KS5vbihcImxvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpXCIsZnVuY3Rpb24oKXthKCdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGI9YSh0aGlzKTtjLmNhbGwoYixiLmRhdGEoKSl9KX0pfShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGU9ZC5kYXRhKFwiYnMudGFiXCIpO2V8fGQuZGF0YShcImJzLnRhYlwiLGU9bmV3IGModGhpcykpLFwic3RyaW5nXCI9PXR5cGVvZiBiJiZlW2JdKCl9KX12YXIgYz1mdW5jdGlvbihiKXt0aGlzLmVsZW1lbnQ9YShiKX07Yy5WRVJTSU9OPVwiMy4zLjVcIixjLlRSQU5TSVRJT05fRFVSQVRJT049MTUwLGMucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLmVsZW1lbnQsYz1iLmNsb3Nlc3QoXCJ1bDpub3QoLmRyb3Bkb3duLW1lbnUpXCIpLGQ9Yi5kYXRhKFwidGFyZ2V0XCIpO2lmKGR8fChkPWIuYXR0cihcImhyZWZcIiksZD1kJiZkLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sXCJcIikpLCFiLnBhcmVudChcImxpXCIpLmhhc0NsYXNzKFwiYWN0aXZlXCIpKXt2YXIgZT1jLmZpbmQoXCIuYWN0aXZlOmxhc3QgYVwiKSxmPWEuRXZlbnQoXCJoaWRlLmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OmJbMF19KSxnPWEuRXZlbnQoXCJzaG93LmJzLnRhYlwiLHtyZWxhdGVkVGFyZ2V0OmVbMF19KTtpZihlLnRyaWdnZXIoZiksYi50cmlnZ2VyKGcpLCFnLmlzRGVmYXVsdFByZXZlbnRlZCgpJiYhZi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7dmFyIGg9YShkKTt0aGlzLmFjdGl2YXRlKGIuY2xvc2VzdChcImxpXCIpLGMpLHRoaXMuYWN0aXZhdGUoaCxoLnBhcmVudCgpLGZ1bmN0aW9uKCl7ZS50cmlnZ2VyKHt0eXBlOlwiaGlkZGVuLmJzLnRhYlwiLHJlbGF0ZWRUYXJnZXQ6YlswXX0pLGIudHJpZ2dlcih7dHlwZTpcInNob3duLmJzLnRhYlwiLHJlbGF0ZWRUYXJnZXQ6ZVswXX0pfSl9fX0sYy5wcm90b3R5cGUuYWN0aXZhdGU9ZnVuY3Rpb24oYixkLGUpe2Z1bmN0aW9uIGYoKXtnLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLmZpbmQoXCI+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKS5lbmQoKS5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCExKSxiLmFkZENsYXNzKFwiYWN0aXZlXCIpLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXScpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITApLGg/KGJbMF0ub2Zmc2V0V2lkdGgsYi5hZGRDbGFzcyhcImluXCIpKTpiLnJlbW92ZUNsYXNzKFwiZmFkZVwiKSxiLnBhcmVudChcIi5kcm9wZG93bi1tZW51XCIpLmxlbmd0aCYmYi5jbG9zZXN0KFwibGkuZHJvcGRvd25cIikuYWRkQ2xhc3MoXCJhY3RpdmVcIikuZW5kKCkuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJykuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMCksZSYmZSgpfXZhciBnPWQuZmluZChcIj4gLmFjdGl2ZVwiKSxoPWUmJmEuc3VwcG9ydC50cmFuc2l0aW9uJiYoZy5sZW5ndGgmJmcuaGFzQ2xhc3MoXCJmYWRlXCIpfHwhIWQuZmluZChcIj4gLmZhZGVcIikubGVuZ3RoKTtnLmxlbmd0aCYmaD9nLm9uZShcImJzVHJhbnNpdGlvbkVuZFwiLGYpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGMuVFJBTlNJVElPTl9EVVJBVElPTik6ZigpLGcucmVtb3ZlQ2xhc3MoXCJpblwiKX07dmFyIGQ9YS5mbi50YWI7YS5mbi50YWI9YixhLmZuLnRhYi5Db25zdHJ1Y3Rvcj1jLGEuZm4udGFiLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gYS5mbi50YWI9ZCx0aGlzfTt2YXIgZT1mdW5jdGlvbihjKXtjLnByZXZlbnREZWZhdWx0KCksYi5jYWxsKGEodGhpcyksXCJzaG93XCIpfTthKGRvY3VtZW50KS5vbihcImNsaWNrLmJzLnRhYi5kYXRhLWFwaVwiLCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nLGUpLm9uKFwiY2xpY2suYnMudGFiLmRhdGEtYXBpXCIsJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLGUpfShqUXVlcnkpLCtmdW5jdGlvbihhKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBiKGIpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZD1hKHRoaXMpLGU9ZC5kYXRhKFwiYnMuYWZmaXhcIiksZj1cIm9iamVjdFwiPT10eXBlb2YgYiYmYjtlfHxkLmRhdGEoXCJicy5hZmZpeFwiLGU9bmV3IGModGhpcyxmKSksXCJzdHJpbmdcIj09dHlwZW9mIGImJmVbYl0oKX0pfXZhciBjPWZ1bmN0aW9uKGIsZCl7dGhpcy5vcHRpb25zPWEuZXh0ZW5kKHt9LGMuREVGQVVMVFMsZCksdGhpcy4kdGFyZ2V0PWEodGhpcy5vcHRpb25zLnRhcmdldCkub24oXCJzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGlcIixhLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbix0aGlzKSkub24oXCJjbGljay5icy5hZmZpeC5kYXRhLWFwaVwiLGEucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCx0aGlzKSksdGhpcy4kZWxlbWVudD1hKGIpLHRoaXMuYWZmaXhlZD1udWxsLHRoaXMudW5waW49bnVsbCx0aGlzLnBpbm5lZE9mZnNldD1udWxsLHRoaXMuY2hlY2tQb3NpdGlvbigpfTtjLlZFUlNJT049XCIzLjMuNVwiLGMuUkVTRVQ9XCJhZmZpeCBhZmZpeC10b3AgYWZmaXgtYm90dG9tXCIsYy5ERUZBVUxUUz17b2Zmc2V0OjAsdGFyZ2V0OndpbmRvd30sYy5wcm90b3R5cGUuZ2V0U3RhdGU9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9dGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpLGY9dGhpcy4kZWxlbWVudC5vZmZzZXQoKSxnPXRoaXMuJHRhcmdldC5oZWlnaHQoKTtpZihudWxsIT1jJiZcInRvcFwiPT10aGlzLmFmZml4ZWQpcmV0dXJuIGM+ZT9cInRvcFwiOiExO2lmKFwiYm90dG9tXCI9PXRoaXMuYWZmaXhlZClyZXR1cm4gbnVsbCE9Yz9lK3RoaXMudW5waW48PWYudG9wPyExOlwiYm90dG9tXCI6YS1kPj1lK2c/ITE6XCJib3R0b21cIjt2YXIgaD1udWxsPT10aGlzLmFmZml4ZWQsaT1oP2U6Zi50b3Asaj1oP2c6YjtyZXR1cm4gbnVsbCE9YyYmYz49ZT9cInRvcFwiOm51bGwhPWQmJmkraj49YS1kP1wiYm90dG9tXCI6ITF9LGMucHJvdG90eXBlLmdldFBpbm5lZE9mZnNldD1mdW5jdGlvbigpe2lmKHRoaXMucGlubmVkT2Zmc2V0KXJldHVybiB0aGlzLnBpbm5lZE9mZnNldDt0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKGMuUkVTRVQpLmFkZENsYXNzKFwiYWZmaXhcIik7dmFyIGE9dGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpLGI9dGhpcy4kZWxlbWVudC5vZmZzZXQoKTtyZXR1cm4gdGhpcy5waW5uZWRPZmZzZXQ9Yi50b3AtYX0sYy5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3A9ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGEucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uLHRoaXMpLDEpfSxjLnByb3RvdHlwZS5jaGVja1Bvc2l0aW9uPWZ1bmN0aW9uKCl7aWYodGhpcy4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpKXt2YXIgYj10aGlzLiRlbGVtZW50LmhlaWdodCgpLGQ9dGhpcy5vcHRpb25zLm9mZnNldCxlPWQudG9wLGY9ZC5ib3R0b20sZz1NYXRoLm1heChhKGRvY3VtZW50KS5oZWlnaHQoKSxhKGRvY3VtZW50LmJvZHkpLmhlaWdodCgpKTtcIm9iamVjdFwiIT10eXBlb2YgZCYmKGY9ZT1kKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiYoZT1kLnRvcCh0aGlzLiRlbGVtZW50KSksXCJmdW5jdGlvblwiPT10eXBlb2YgZiYmKGY9ZC5ib3R0b20odGhpcy4kZWxlbWVudCkpO3ZhciBoPXRoaXMuZ2V0U3RhdGUoZyxiLGUsZik7aWYodGhpcy5hZmZpeGVkIT1oKXtudWxsIT10aGlzLnVucGluJiZ0aGlzLiRlbGVtZW50LmNzcyhcInRvcFwiLFwiXCIpO3ZhciBpPVwiYWZmaXhcIisoaD9cIi1cIitoOlwiXCIpLGo9YS5FdmVudChpK1wiLmJzLmFmZml4XCIpO2lmKHRoaXMuJGVsZW1lbnQudHJpZ2dlcihqKSxqLmlzRGVmYXVsdFByZXZlbnRlZCgpKXJldHVybjt0aGlzLmFmZml4ZWQ9aCx0aGlzLnVucGluPVwiYm90dG9tXCI9PWg/dGhpcy5nZXRQaW5uZWRPZmZzZXQoKTpudWxsLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3MoYy5SRVNFVCkuYWRkQ2xhc3MoaSkudHJpZ2dlcihpLnJlcGxhY2UoXCJhZmZpeFwiLFwiYWZmaXhlZFwiKStcIi5icy5hZmZpeFwiKX1cImJvdHRvbVwiPT1oJiZ0aGlzLiRlbGVtZW50Lm9mZnNldCh7dG9wOmctYi1mfSl9fTt2YXIgZD1hLmZuLmFmZml4O2EuZm4uYWZmaXg9YixhLmZuLmFmZml4LkNvbnN0cnVjdG9yPWMsYS5mbi5hZmZpeC5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGEuZm4uYWZmaXg9ZCx0aGlzfSxhKHdpbmRvdykub24oXCJsb2FkXCIsZnVuY3Rpb24oKXthKCdbZGF0YS1zcHk9XCJhZmZpeFwiXScpLmVhY2goZnVuY3Rpb24oKXt2YXIgYz1hKHRoaXMpLGQ9Yy5kYXRhKCk7ZC5vZmZzZXQ9ZC5vZmZzZXR8fHt9LG51bGwhPWQub2Zmc2V0Qm90dG9tJiYoZC5vZmZzZXQuYm90dG9tPWQub2Zmc2V0Qm90dG9tKSxudWxsIT1kLm9mZnNldFRvcCYmKGQub2Zmc2V0LnRvcD1kLm9mZnNldFRvcCksYi5jYWxsKGMsZCl9KX0pfShqUXVlcnkpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2pzL2Jvb3RzdHJhcC5taW4uanMiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2Nzcy9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=