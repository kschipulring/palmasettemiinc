import {detectImage, debounce} from './utils.js'

const baseCoordsMap = new WeakMap()

const responsiveImageMap = async img => {
  let imgBaseWidth = img.getAttribute('width')
  if (imgBaseWidth == null) {
    imgBaseWidth = img.naturalWidth
  }
  let imgBaseHeight = img.getAttribute('height')
  if (imgBaseHeight == null) {
    imgBaseHeight = img.naturalHeight
  }
  const targetMapName = img.useMap.trim().replace(/^#/, '')
  const targetMap = document.querySelector(`map[name="${targetMapName}"]`)
  const areas = targetMap.querySelectorAll('area')

  for (const area of areas) {
    const baseCoords = area.coords.split(',').map(str => Number(str))
    baseCoordsMap.set(area, baseCoords)
  }

  const setCoords = () => {
    const imgWidth = img.width
    const imgHeight = img.height
    const horizonRatio = imgWidth / imgBaseWidth
    const verticalRatio = imgHeight / imgBaseHeight

    for (const area of areas) {
      const baseCoords = baseCoordsMap.get(area)
      const adjustedCoords = baseCoords.map((coord, i) => {
        const isEven = i % 2 === 0
        return Math.round(coord * (isEven ? horizonRatio : verticalRatio))
      })
      area.coords = adjustedCoords.join(',')
    }
  }

  // wait for a load of an image
  await (img.complete ? Promise.resolve() : detectImage(img.src))

  window.addEventListener('resize', debounce(setCoords))
  setCoords()
}

export default responsiveImageMap
