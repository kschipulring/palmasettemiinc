'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseCoordsMap = new _weakMap2.default();

var responsiveImageMap = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(img) {
    var imgBaseWidth, imgBaseHeight, targetMapName, targetMap, areas, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, area, baseCoords, setCoords;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            imgBaseWidth = img.getAttribute('width');

            if (imgBaseWidth == null) {
              imgBaseWidth = img.naturalWidth;
            }
            imgBaseHeight = img.getAttribute('height');

            if (imgBaseHeight == null) {
              imgBaseHeight = img.naturalHeight;
            }
            targetMapName = img.useMap.trim().replace(/^#/, '');
            targetMap = document.querySelector('map[name="' + targetMapName + '"]');
            areas = targetMap.querySelectorAll('area');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 10;


            for (_iterator = (0, _getIterator3.default)(areas); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              area = _step.value;
              baseCoords = area.coords.split(',').map(function (str) {
                return Number(str);
              });

              baseCoordsMap.set(area, baseCoords);
            }

            _context.next = 18;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context['catch'](10);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 18:
            _context.prev = 18;
            _context.prev = 19;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 21:
            _context.prev = 21;

            if (!_didIteratorError) {
              _context.next = 24;
              break;
            }

            throw _iteratorError;

          case 24:
            return _context.finish(21);

          case 25:
            return _context.finish(18);

          case 26:
            setCoords = function setCoords() {
              var imgWidth = img.width;
              var imgHeight = img.height;
              var horizonRatio = imgWidth / imgBaseWidth;
              var verticalRatio = imgHeight / imgBaseHeight;

              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = (0, _getIterator3.default)(areas), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var area = _step2.value;

                  var baseCoords = baseCoordsMap.get(area);
                  var adjustedCoords = baseCoords.map(function (coord, i) {
                    var isEven = i % 2 === 0;
                    return Math.round(coord * (isEven ? horizonRatio : verticalRatio));
                  });
                  area.coords = adjustedCoords.join(',');
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            };

            // wait for a load of an image


            _context.next = 29;
            return img.complete ? _promise2.default.resolve() : (0, _utils.detectImage)(img.src);

          case 29:

            window.addEventListener('resize', (0, _utils.debounce)(setCoords));
            setCoords();

          case 31:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[10, 14, 18, 26], [19,, 21, 25]]);
  }));

  return function responsiveImageMap(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = responsiveImageMap;
//# sourceMappingURL=responsive-image-map.js.map