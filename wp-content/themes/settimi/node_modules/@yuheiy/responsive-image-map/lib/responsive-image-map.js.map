{"version":3,"sources":["../src/responsive-image-map.js"],"names":["baseCoordsMap","responsiveImageMap","img","imgBaseWidth","getAttribute","naturalWidth","imgBaseHeight","naturalHeight","targetMapName","useMap","trim","replace","targetMap","document","querySelector","areas","querySelectorAll","area","baseCoords","coords","split","map","Number","str","set","setCoords","imgWidth","width","imgHeight","height","horizonRatio","verticalRatio","get","adjustedCoords","coord","i","isEven","Math","round","join","complete","resolve","src","window","addEventListener"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA,IAAMA,gBAAgB,uBAAtB;;AAEA,IAAMC;AAAA,wEAAqB,iBAAMC,GAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,wBADqB,GACND,IAAIE,YAAJ,CAAiB,OAAjB,CADM;;AAEzB,gBAAID,gBAAgB,IAApB,EAA0B;AACxBA,6BAAeD,IAAIG,YAAnB;AACD;AACGC,yBALqB,GAKLJ,IAAIE,YAAJ,CAAiB,QAAjB,CALK;;AAMzB,gBAAIE,iBAAiB,IAArB,EAA2B;AACzBA,8BAAgBJ,IAAIK,aAApB;AACD;AACKC,yBATmB,GASHN,IAAIO,MAAJ,CAAWC,IAAX,GAAkBC,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CATG;AAUnBC,qBAVmB,GAUPC,SAASC,aAAT,gBAAoCN,aAApC,QAVO;AAWnBO,iBAXmB,GAWXH,UAAUI,gBAAV,CAA2B,MAA3B,CAXW;AAAA;AAAA;AAAA;AAAA;;;AAazB,wDAAmBD,KAAnB,qGAA0B;AAAfE,kBAAe;AAClBC,wBADkB,GACLD,KAAKE,MAAL,CAAYC,KAAZ,CAAkB,GAAlB,EAAuBC,GAAvB,CAA2B;AAAA,uBAAOC,OAAOC,GAAP,CAAP;AAAA,eAA3B,CADK;;AAExBvB,4BAAcwB,GAAd,CAAkBP,IAAlB,EAAwBC,UAAxB;AACD;;AAhBwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAkBnBO,qBAlBmB,GAkBP,SAAZA,SAAY,GAAM;AACtB,kBAAMC,WAAWxB,IAAIyB,KAArB;AACA,kBAAMC,YAAY1B,IAAI2B,MAAtB;AACA,kBAAMC,eAAeJ,WAAWvB,YAAhC;AACA,kBAAM4B,gBAAgBH,YAAYtB,aAAlC;;AAJsB;AAAA;AAAA;;AAAA;AAMtB,iEAAmBS,KAAnB,iHAA0B;AAAA,sBAAfE,IAAe;;AACxB,sBAAMC,aAAalB,cAAcgC,GAAd,CAAkBf,IAAlB,CAAnB;AACA,sBAAMgB,iBAAiBf,WAAWG,GAAX,CAAe,UAACa,KAAD,EAAQC,CAAR,EAAc;AAClD,wBAAMC,SAASD,IAAI,CAAJ,KAAU,CAAzB;AACA,2BAAOE,KAAKC,KAAL,CAAWJ,SAASE,SAASN,YAAT,GAAwBC,aAAjC,CAAX,CAAP;AACD,mBAHsB,CAAvB;AAIAd,uBAAKE,MAAL,GAAcc,eAAeM,IAAf,CAAoB,GAApB,CAAd;AACD;AAbqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcvB,aAhCwB;;AAkCzB;;;AAlCyB;AAAA,mBAmClBrC,IAAIsC,QAAJ,GAAe,kBAAQC,OAAR,EAAf,GAAmC,wBAAYvC,IAAIwC,GAAhB,CAnCjB;;AAAA;;AAqCzBC,mBAAOC,gBAAP,CAAwB,QAAxB,EAAkC,qBAASnB,SAAT,CAAlC;AACAA;;AAtCyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA,GAAN;;kBAyCexB,kB","file":"responsive-image-map.js","sourcesContent":["import {detectImage, debounce} from './utils.js'\n\nconst baseCoordsMap = new WeakMap()\n\nconst responsiveImageMap = async img => {\n  let imgBaseWidth = img.getAttribute('width')\n  if (imgBaseWidth == null) {\n    imgBaseWidth = img.naturalWidth\n  }\n  let imgBaseHeight = img.getAttribute('height')\n  if (imgBaseHeight == null) {\n    imgBaseHeight = img.naturalHeight\n  }\n  const targetMapName = img.useMap.trim().replace(/^#/, '')\n  const targetMap = document.querySelector(`map[name=\"${targetMapName}\"]`)\n  const areas = targetMap.querySelectorAll('area')\n\n  for (const area of areas) {\n    const baseCoords = area.coords.split(',').map(str => Number(str))\n    baseCoordsMap.set(area, baseCoords)\n  }\n\n  const setCoords = () => {\n    const imgWidth = img.width\n    const imgHeight = img.height\n    const horizonRatio = imgWidth / imgBaseWidth\n    const verticalRatio = imgHeight / imgBaseHeight\n\n    for (const area of areas) {\n      const baseCoords = baseCoordsMap.get(area)\n      const adjustedCoords = baseCoords.map((coord, i) => {\n        const isEven = i % 2 === 0\n        return Math.round(coord * (isEven ? horizonRatio : verticalRatio))\n      })\n      area.coords = adjustedCoords.join(',')\n    }\n  }\n\n  // wait for a load of an image\n  await (img.complete ? Promise.resolve() : detectImage(img.src))\n\n  window.addEventListener('resize', debounce(setCoords))\n  setCoords()\n}\n\nexport default responsiveImageMap\n"]}